<?php

namespace App\Http\Controllers\Bots;

use App\Enums\OrderStatusEnum;
use App\Facades\BotManager;
use App\Facades\BotMethods;
use App\Facades\BusinessLogic;
use App\Facades\StartCodesService;
use App\Http\Controllers\Controller;
use App\Models\Bot;
use App\Models\BotDialogCommand;
use App\Models\BotMedia;
use App\Models\BotMenuSlug;
use App\Models\BotNote;
use App\Models\BotPage;
use App\Models\BotUser;
use App\Models\Documents;
use App\Models\Order;
use App\Models\ReferralHistory;
use App\Models\Transaction;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Telegram\Bot\FileUpload\InputFile;

class SystemDiagnosticController extends Controller
{
    //

    public function testConfig(...$data)
    {
        BotManager::bot()
            ->testSetMyName("–ù–û–í–û–ï –ò–ú–Ø –ë–û–¢–ê");
    }

    public function demodice(...$data)
    {
        BotManager::bot()
            ->replyDice();
    }

    public function uploadFilesToBot(...$data){

        $bot = BotManager::bot()->getSelf();
        $botUser = BotManager::bot()->currentBotUser();

        BotManager::bot()
           ->sendInlineKeyboard($botUser->telegram_chat_id ?? null,
            "üóÉÔ∏è–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤",
            [
                [
                    [
                        "text" => "üìÇ–û—Ç–∫—Ä—ã—Ç—å",
                        "web_app" => [
                            "url" => env("APP_URL") . "/bot-client/simple/$bot->bot_domain?slug=route&hide_menu#/s/upload"
                        ]
                    ],
                ],

            ]);
    }

    public function uploadAnyKindOfMedia(...$data)
    {
        $caption = $data[2] ?? null;
        $doc = $data[3] ?? null;
        $type = $data[4] ?? "document";

        $botUser = BotManager::bot()->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->sendMessage(
                    $botUser->telegram_chat_id,
                    "–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É –±–æ—Ç–∞!");
            return;
        }

        $docToSend = $doc->file_id ?? null;

        $bot = BotManager::bot()->getSelf();

        $media = \App\Models\BotMedia::query()->updateOrCreate([
            'bot_id' => $bot->id,
            'bot_user_id' => $botUser->id,
            'file_id' => $docToSend,
        ], [
            'caption' => $caption,
            'type' => $type
        ]);

        BotManager::bot()
            ->sendMessage(
                $botUser->telegram_chat_id,
                "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–¥–∏–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –±–æ—Ç–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: <b>#$media->id</b>\n<em>$docToSend</em>\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /media ");

    }

    public function generateOrderTopics(...$data){
        $threads = [
                [
                    "title"=> '–û—Ç–∑—ã–≤—ã',
                    "key"=> 'reviews',
                ],
                [
                    "title"=> '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ cashback',
                    "key"=> 'cashback',

                ],
                [
                    "title"=> '–í–æ–ø—Ä–æ—Å—ã',
                    "key"=> 'questions',

                ],
                [
                    "title"=> '–ö–æ–Ω–∫—É—Ä—Å—ã',
                    "key"=> 'actions',

                ],
                [
                    "title"=> '–ó–∞–∫–∞–∑—ã',
                    "key"=> 'orders',

                ],
                [
                    "title"=> '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
                    "key"=> 'ask-money',

                ],
                [
                    "title"=> '–î–æ—Å—Ç–∞–≤–∫–∞',
                    "key"=> 'delivery',

                ],
                [
                    "title"=> '–û—Ç–≤–µ—Ç—ã',
                    "key"=> 'response',

                ],
                [
                    "title"=> '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                    "key"=> 'callback',

                ]
            ];

        $bot = BotManager::bot()->getSelf();

        return BusinessLogic::bots()
            ->setBot($bot ?? null)
            ->createBotTopics($threads);
    }

    public function saveAsOrderChannel(...$data){
        $bot = BotManager::bot()->getSelf();

        $bot->order_channel = $data[0]->chat->id;
        $bot->save();

        BotManager::bot()
            ->replyInlineKeyboard("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞" . ($data[0]->chat->id ?? '–Ω–µ —É–∫–∞–∑–∞–Ω') . "- —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–∫–∞–∑–æ–≤. –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–ø–∏–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ!",
                [
                    [
                        ["text" => "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏","callback_data"=>"/generate_order_topics"]
                    ],
                ],
                $data[0]->message_thread_id ?? null,
            );


    }

    public function saveAsMainChannel(...$data){
        $bot = BotManager::bot()->getSelf();

        $bot->main_channel = $data[0]->chat->id;
        $bot->save();

        BotManager::bot()
            ->reply("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞" . ($data[0]->chat->id ?? '–Ω–µ —É–∫–∞–∑–∞–Ω') . "- —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π!",
                $data[0]->message_thread_id ?? null);


    }

    public function getMyId(...$data)
    {
        BotManager::bot()
            ->replyInlineKeyboard("–í–∞—à —á–∞—Ç id: <pre><code>" . ($data[0]->chat->id ?? '–Ω–µ —É–∫–∞–∑–∞–Ω') . "</code></pre>\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–ø–∏–∫–∞: " . ($data[0]->message_thread_id ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
                [
                    [
                        ["text" => "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–æ–≤","callback_data"=>"/save_as_order_channel"]
                    ],
                    [
                        ["text" => "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª","callback_data"=>"/save_as_main_channel"]
                    ]
                ],
                $data[0]->message_thread_id ?? null,
            );
    }

    public function resetAllBotUsers(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        $bot = BotManager::bot()->getSelf();

        if (!$botUser->is_admin) {
            BotManager::bot()
                ->sendMessage(
                    $botUser->telegram_chat_id,
                    "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $value = $data[3] ?? 'no';

        if ($value != 'yes') {
            BotManager::bot()
                ->reply("–í–ø–∏—à–∏—Ç–µ <b>yes</b> - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
            return;
        }

        BotManager::bot()
            ->replyAction()
            ->reply("–ë–æ—Ç –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω —á–µ—Ä–µ–∑ 3...2...1...")
            ->replyAction()
            ->reply("–ë–æ—Ç –æ—á–∏—â–µ–Ω");

        BusinessLogic::botUsers()
            ->setBotUser($botUser)
            ->setBot($bot)
            ->resetAllBotUsers();


    }

    public function democircle(...$data)
    {
        BotManager::bot()
            ->replyVideoNote(
                InputFile::create(public_path() . "/videos/vid1.mp4"), [
                [
                    ["text" => "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                ]
            ],
                "reply"
            );
    }

    public function getDiagnosticTable(...$data)
    {

        $botId = $data[3] ?? null;

        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        BotManager::bot()
            ->reply("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞")
            ->reply("–í–∞—à —á–∞—Ç id: " . ($data[0]->chat->id ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'));

        $bot = !is_null($botId) ? Bot::query()->find($botId) : null;

        if (is_null($bot) || is_null($botId))
            $bot = BotManager::bot()->getSelf();

        $this->makeDiagnostic($bot);
    }

    private function makeDiagnostic($bot)
    {
        $companyDomain = $bot->company->slug;

        $usersInBot = BotUser::query()
            ->where("bot_id", $bot->id)
            ->count();

        $text = "–ë–æ—Ç: " . $bot->bot_domain . " —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ - " . ($bot->is_active ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω') . "\n" .
            "–ö–æ–º–ø–∞–Ω–∏—è-–≤–ª–∞–¥–µ–ª–µ—Ü: " . $companyDomain . "\n" .
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: " . $usersInBot . "\n" .
            "–ù–∞–ª–∏—á–∏–µ —Ç–æ—É–∫–µ–Ω–∞: " . (is_null($bot->bot_token) ? "–ë–µ–∑ —Ç–æ—É–∫–µ–Ω–∞" : "–° —Ç–æ—É–∫–µ–Ω–æ–º") . "\n" .
            "–ë–∞–ª–∞–Ω—Å: " . ($bot->balance ?? 0) . " —Ä—É–±.\n" .
            "–¢–∞—Ä–∏—Ñ: " . ($bot->tax_per_day ?? 0) . " —Ä—É–±\–¥–µ–Ω—å\n" .
            "CashBack —É—Ä–æ–≤–µ–Ω—å 1: " . ($bot->level_1 ?? 0) . " %\n" .
            "CashBack —É—Ä–æ–≤–µ–Ω—å 2: " . ($bot->level_2 ?? 0) . " %\n" .
            "CashBack —É—Ä–æ–≤–µ–Ω—å 3: " . ($bot->level_3 ?? 0) . " %\n" .
            "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: " . ($bot->main_channel ?? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω') . "\n" .
            "–ö–∞–Ω–∞–ª –∑–∞–∫–∞–∑–æ–≤: " . ($bot->order_channel ?? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω') . "\n" .
            "–ú–∞–≥–∞–∑–∏–Ω: " . ($bot->vk_shop_link ?? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω') . "\n" .
            "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: " . (is_null($bot->payment_provider_token) ? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∞') . "\n" .
            "AMO CRM: " . (is_null($bot->amo) ? '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∞') . "\n" .
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—ç—à–±—ç–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: " . ($bot->auto_cashback_on_payments ? '–î–∞' : '–ù–µ—Ç') . "\n\n" .
            "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:\n <em>" . ($bot->description ?? '–ù–µ –∑–∞–¥–∞–Ω–æ') . "</em>\n\n" .
            "–ü—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n <em>" . ($bot->welcome_message ?? '–ù–µ –∑–∞–¥–∞–Ω–æ') . "</em>\n\n" .
            "–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö. —Ä–∞–±–æ—Ç:\n <em>" . ($bot->maintenance_message ?? '–ù–µ –∑–∞–¥–∞–Ω–æ') . "</em>\n\n" .
            "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:\n <em>" . ($bot->blocked_message ?? '–ù–µ –∑–∞–¥–∞–Ω–æ') . "</em>\n";


        $path = storage_path("app/public") . "/companies/$companyDomain/" . ($bot->image ?? 'noimage.jpg');

        $file = InputFile::create(
            file_exists($path) ?
                $path :
                public_path() . "/images/cashman.jpg"
        );

        BotManager::bot()
            ->replyPhoto("", $file)
            ->reply($text);

        $pages = BotPage::query()
            ->where("bot_id", $bot->id)
            ->get();

        if (count($pages)) {
            $tmp = "";
            $keyboard = [];
            $rowTmpKeyboard = [];
            $index = 1;
            foreach ($pages as $page) {
                $tmp .= "$index# <b>" . ($page->slug->command ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ') . "</b>\n";

                if ($index % 4 != 0) {
                    $rowTmpKeyboard[] = [
                        "text" => $index,
                        "callback_data" => $page->slug->command ?? $page->slug->slug
                    ];
                } else {
                    $rowTmpKeyboard[] = [
                        "text" => $index,
                        "callback_data" => $page->slug->command ?? $page->slug->slug
                    ];

                    $keyboard[] = $rowTmpKeyboard;
                    $rowTmpKeyboard = [];
                }

                $index++;
            }

            if (count($rowTmpKeyboard) > 0) {
                $keyboard[] = $rowTmpKeyboard;
            }

            BotManager::bot()
                ->replyInlineKeyboard("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã <b>(" . count($pages) . " —Å—Ç—Ä.)</b> –≤ –±–æ—Ç–µ:\n$tmp", $keyboard);

        } else
            BotManager::bot()
                ->reply("–°—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–æ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");

        $slugs = BotMenuSlug::query()
            ->where("bot_id", $bot->id)
            ->where("is_global", true)
            ->get();

        if (count($slugs) > 0) {
            $tmp = "";
            $keyboard = [];
            $rowTmpKeyboard = [];
            $index = 1;

            foreach ($slugs as $slug) {
                $tmp .= "$index# <b>" . ($slug->command ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ') . "</b>\n";

                if ($index % 4 != 0) {
                    $rowTmpKeyboard[] = [
                        "text" => $index,
                        "callback_data" => $slug->command ?? $slug->slug
                    ];
                } else {
                    $rowTmpKeyboard[] = [
                        "text" => $index,
                        "callback_data" => $slug->command ?? $slug->slug
                    ];

                    $keyboard[] = $rowTmpKeyboard;
                    $rowTmpKeyboard = [];
                }

                $index++;
            }

            if (count($rowTmpKeyboard) > 0) {
                $keyboard[] = $rowTmpKeyboard;
            }

            BotManager::bot()
                ->replyInlineKeyboard("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã <b>(" . count($slugs) . " –µ–¥.)</b> –≤ –±–æ—Ç–µ:\n$tmp", $keyboard);

        } else
            BotManager::bot()
                ->reply("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –±–æ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");

        $dialogs = BotDialogCommand::query()
            ->where("bot_id", $bot->id)
            ->get();

        if (count($dialogs) > 0) {
            $tmp = "";
            foreach ($dialogs as $dialog)
                $tmp .= ($dialog->pre_text ?? '–ù–µ –∑–∞–¥–∞–Ω') . "\n";

            BotManager::bot()
                ->reply("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (" . count($dialogs) . " –µ–¥):\n$tmp");
        } else
            BotManager::bot()
                ->reply("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –±–æ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");

    }

    /**
     * @throws \Exception
     */
    public function startWithParam(...$data)
    {
        BotManager::bot()->stopBotDialog();

        $startCommand = $data[3] ?? null;
        StartCodesService::bot()->handler($startCommand);

        if (is_null($startCommand))
            BotManager::bot()->pushCommand("/start");

    }

    public function payForBot(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        $bot = BotManager::bot()->getSelf();

        if (!$botUser->is_admin) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $values = [500, 1000, 2000, 5000, 10000, 25000, 50000];

        $weekTaxFee = $bot->tax_per_day * 7;
        $monthTaxFee = $bot->tax_per_day * 31;
        $halfYearTaxFee = $bot->tax_per_day * 31 * 6;
        $yearTaxFee = $bot->tax_per_day * 31 * 12;


        $keyboard = [];
        $row = [];

        $rowIndex = 1;
        foreach ($values as $value) {
            $row[] = ["text" => "$value ‚ÇΩ", "callback_data" => "/pay_tax_fee $value"];

            if ($rowIndex % 3 == 0) {
                $keyboard[] = $row;
                $row = [];
            }

            $rowIndex++;

        }

        if (!empty($row))
            $keyboard[] = $row;

        $message = "–í–∞—à –±–∞–ª–∞–Ω—Å: <b>" . ($bot->balance ?? 0) . " ‚ÇΩ</b>\n" .
            "–í–∞—à —Ç–∞—Ä–∏—Ñ: <b>" . ($bot->tax_per_day ?? 0) . " ‚ÇΩ/–¥–µ–Ω—å</b>\n";

        BotManager::bot()
            ->replyInlineKeyboard($message . "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", $keyboard);

        $keyboard = [
            [
                ["text" => "–ù–µ–¥–µ–ª—è $weekTaxFee ‚ÇΩ", "callback_data" => "/pay_tax_fee $weekTaxFee"],
                ["text" => "–ú–µ—Å—è—Ü $monthTaxFee ‚ÇΩ", "callback_data" => "/pay_tax_fee $monthTaxFee"],

            ],

            [
                ["text" => "–ü–æ–ª –≥–æ–¥–∞ $halfYearTaxFee ‚ÇΩ", "callback_data" => "/pay_tax_fee $halfYearTaxFee"],
                ["text" => "–ì–æ–¥ $yearTaxFee ‚ÇΩ", "callback_data" => "/pay_tax_fee $yearTaxFee"],
            ],


        ];

        BotManager::bot()->replyInlineKeyboard("–∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É:", $keyboard);


    }

    public function payTaxFee(...$data)
    {


        $bot = BotManager::bot()->getSelf();
        $botUser = BotManager::bot()->currentBotUser();

        $value = $data[3] ?? null;

        if (is_null($value)) {
            BotManager::bot()->reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—É—é –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å—É–º–º—É! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é");
            return;
        }

        $prices = [
            [
                "label" => "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Å–µ—Ä–≤–∏—Å–∞ CashMan",
                "amount" => $value * 100
            ]
        ];
        $payload = bin2hex(Str::uuid());

        $providerToken = $bot->payment_provider_token;
        $currency = "RUB";

        Transaction::query()->create([
            'user_id' => $botUser->user_id,
            'bot_id' => $bot->id,
            'payload' => $payload,
            'currency' => $currency,
            'total_amount' => $value,
            'status' => 0,
            'products_info' => (object)[
                "payload" => $payloadData ?? null,
                "prices" => $prices,
            ],
        ]);

        $needs = [
            "need_name" => true,
            "need_phone_number" => true,
            "need_email" => true,
            "need_shipping_address" => false,
            "send_phone_number_to_provider" => true,
            "send_email_to_provider" => true,
            "is_flexible" => false,
            "disable_notification" => false,
            "protect_content" => false,
        ];

        $keyboard = [
            [
                ["text" => "–û–ø–ª–∞—Ç–∏—Ç—å $value ‚ÇΩ", "pay" => true],
            ],

        ];

        $providerData = (object)[
            "receipt" => [
                (object)[
                    "description" => "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Å–µ—Ä–≤–∏—Å–∞ CashMan",
                    "quantity" => "1.00",
                    "amount" => (object)[
                        "value" => $value,
                        "currency" => $currency
                    ],
                    "vat_code" => 0
                ]
            ]
        ];

        \App\Facades\BotManager::bot()
            ->replyInvoice(
                "CashMan", "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ —Å–µ—Ä–≤–∏—Å–∞ CashMan", $prices, $payload, $providerToken, $currency, $needs, $keyboard,
                $providerData
            );
    }

    public function cashmanPayment(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        $bot = BotManager::bot()->getSelf();

        if (!$botUser->is_admin) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $paymentUrl = env("PAYMENT_BOT_SERVICE_URL") ?? null;

        if (is_null($paymentUrl)) {
            BotManager::bot()->reply("–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
            return;
        }


        $values = [500, 1000, 2000, 5000, 10000, 25000, 50000];

        $weekTaxFee = $bot->tax_per_day * 7;
        $monthTaxFee = $bot->tax_per_day * 31;
        $halfYearTaxFee = $bot->tax_per_day * 31 * 6;
        $yearTaxFee = $bot->tax_per_day * 31 * 12;


        $keyboard = [];
        $row = [];

        $rowIndex = 1;
        $tmpBotId = (str_repeat("0", 10 - strlen($bot->id))) . $bot->id;
        $tmpBotUserId = (str_repeat("0", 10 - strlen($botUser->id))) . $botUser->id;


        foreach ($values as $value) {

            $amount = (str_repeat("0", 10 - strlen($value))) . $value;
            $bcryptLink = base64_encode("005U" . $tmpBotUserId . "B" . $tmpBotId . "A" . $amount);
            $url = "$paymentUrl?start=$bcryptLink";

            $row[] = ["text" => "$value ‚ÇΩ", "url" => $url];

            if ($rowIndex % 3 == 0) {
                $keyboard[] = $row;
                $row = [];
            }

            $rowIndex++;

        }

        if (!empty($row))
            $keyboard[] = $row;

        $message = "–í–∞—à –±–∞–ª–∞–Ω—Å: <b>" . ($bot->balance ?? 0) . " ‚ÇΩ</b>\n" .
            "–í–∞—à —Ç–∞—Ä–∏—Ñ: <b>" . ($bot->tax_per_day ?? 0) . " ‚ÇΩ/–¥–µ–Ω—å</b>\n";


        BotManager::bot()
            ->replyInlineKeyboard($message . "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", $keyboard);

        $amountWeek = (str_repeat("0", 10 - strlen($weekTaxFee))) . $weekTaxFee;
        $bcryptLink = base64_encode("005U" . $tmpBotUserId . "B" . $tmpBotId . "A$amountWeek");
        $urlWeek = "$paymentUrl?start=$bcryptLink";

        $amountMonth = (str_repeat("0", 10 - strlen($monthTaxFee))) . $monthTaxFee;
        $bcryptLink = base64_encode("005U" . $tmpBotUserId . "B" . $tmpBotId . "A$amountMonth");
        $urlMonth = "$paymentUrl?start=$bcryptLink";

        $amountHalfYear = (str_repeat("0", 10 - strlen($halfYearTaxFee))) . $halfYearTaxFee;
        $bcryptLink = base64_encode("005U" . $tmpBotUserId . "B" . $tmpBotId . "A$amountHalfYear");
        $urlHalfYear = "$paymentUrl?start=$bcryptLink";

        $amountYear = (str_repeat("0", 10 - strlen($yearTaxFee))) . $yearTaxFee;
        $bcryptLink = base64_encode("005U" . $tmpBotUserId . "B" . $tmpBotId . "A$amountYear");
        $urlYear = "$paymentUrl?start=$bcryptLink";

        $keyboard = [
            [
                ["text" => "–ù–µ–¥–µ–ª—è $weekTaxFee ‚ÇΩ", "url" => "$urlWeek"],
                ["text" => "–ú–µ—Å—è—Ü $monthTaxFee ‚ÇΩ", "url" => "$urlMonth"],

            ],

            [
                ["text" => "–ü–æ–ª –≥–æ–¥–∞ $halfYearTaxFee ‚ÇΩ", "url" => "$urlHalfYear"],
                ["text" => "–ì–æ–¥ $yearTaxFee ‚ÇΩ", "url" => "$urlYear"],
            ],


        ];

        BotManager::bot()->replyInlineKeyboard("–∏–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É:", $keyboard);

    }

    public function sendReview(...$data)
    {

        $value = $data[3] ?? 0;

        $botUser = BotManager::bot()
            ->currentBotUser();

        $emojis = ["üò°", "üòï", "üòê", "üôÇ", "üòÅ"];


        $name = BotMethods::prepareUserName($botUser);

        $tgId = $botUser->telegram_chat_id ?? '-';
        $phone = $botUser->phone ?? '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω';


        $bot = BotManager::bot()->getSelf();

        BotManager::bot()
            ->sendMessage($botUser->telegram_chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —É—á—Ç–µ–Ω!");

        $thread = $bot->topics["reviews"] ?? null;
        /*
                if ($value <= 2)*/
        BotManager::bot()
            ->sendMessage($bot->order_channel ?? null,
                "#–æ—Ç–∑—ã–≤\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $name ($tgId, $phone) –æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ " . ($emojis[$value] ?? "üò°") . "!",
                $thread
            );

        $messageId = $data[0]->message_id ?? null;

        if (!is_null($messageId))
            BotManager::bot()
                ->editMessageText(
                    $botUser->telegram_chat_id,
                    $messageId,
                    "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—Éüíñ"
                )
                ->editInlineKeyboard(
                    $botUser->telegram_chat_id,
                    $messageId,
                    [
                        [
                            ["text" => "üì¢–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ", "web_app" => [
                                "url" => env("APP_URL") . "/bot-client/simple/$bot->bot_domain?slug=route&hide_menu#/s/feedback"
                            ]],
                        ],
                    ]);

        /*     if ($value==4){
                 BotMethods::bot()
                     ->whereBot($bot)
                     ->sendInlineKeyboard(
                         $botUser->telegram_chat_id,
                         "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É —á–∞–µ–≤—ã–µ CashBack-–æ–º (–û—Ç —Å—É–º–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –í–∞–º)", [
                             [
                                 ["text" => "0%", "callback_data" => "/send_tips 0"],
                                 ["text" => "5%", "callback_data" => "/send_tips 1"],
                                 ["text" => "10%", "callback_data" => "/send_tips 2"],
                                 ["text" => "20%", "callback_data" => "/send_tips 3"],
                                 ["text" => "30%", "callback_data" => "/send_tips 4"],
                             ]
                         ]
                     );
             }*/
    }

    public function sendTips(...$data)
    {
        $value = $data[3] ?? 0;
    }

    public function successCompleteOrder(...$data){
        $bot = BotManager::bot()->getSelf();

        $botUser = BotUser::query()
            ->where("bot_id", $bot->id)
            ->where("telegram_chat_id", $data[3] ?? null)
            ->first();

        if (is_null($botUser)) {
            BotManager::bot()
                ->reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        $order = Order::query()
            ->where("bot_id", $bot->id)
            ->where("customer_id", $botUser->id)
            ->orderBy("created_at", "DESC")
            ->first();

        if (is_null($order)) {
            BotManager::bot()
                ->reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if ($order->status != OrderStatusEnum::NewOrder->value){
            BotManager::bot()
                ->reply("‚ùó–î–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ‚ùó");
            return;
        }

        $order->status = OrderStatusEnum::InDelivery->value;
        $order->save();

        $channel = $bot->main_channel ?? null;

        $products = "–Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤";
        if (!empty($order->product_details)) {

            $products = "";

            foreach ($order->product_details as $detail) {
                $detail = (object)$detail;
                if (is_array($detail->products)) {
                    foreach ($detail->products as $product) {
                        $product = (object)$product;
                        $products .= "$product->title x$product->count = $product->price ‚ÇΩ\n";
                    }

                } else
                    $products .= "–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: $detail->products\n";

            }
        }


        $text = "<em>$products</em>\n–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: " . Carbon::parse($order->created_at)
                ->format("Y-m-d H:i:s");

      /*  if (!is_null($channel)) {
            BotMethods::bot()
                ->whereBot($bot)
                ->sendMessage(
                    $channel,
                    "‚úÖ–ó–∞–∫–∞–∑ <b>‚Ññ$order->id</b> –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ:\n\n$text"
                );

            BotManager::bot()
                ->reply("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

        }*/

        $botUser = BotUser::query()
            ->find($order->customer_id);


        if (is_null($botUser)) {
            return;
        }

        BotMethods::bot()
            ->whereBot($bot)
            ->sendMessage(
                $botUser->telegram_chat_id,
                "‚úÖ–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ$order->id</b> –≥–æ—Ç–æ–≤ –∏ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å. –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!"
            );

    }

    public function sendToDelivery(...$data){
        $bot = BotManager::bot()->getSelf();

        $botUser = BotUser::query()
            ->where("bot_id", $bot->id)
            ->where("telegram_chat_id", $data[3] ?? null)
            ->first();

        if (is_null($botUser)) {
            BotManager::bot()
                ->reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        $order = Order::query()
            ->where("bot_id", $bot->id)
            ->where("customer_id", $botUser->id)
            ->orderBy("created_at", "DESC")
            ->first();

        if (is_null($order)) {
            BotManager::bot()
                ->reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if ($order->status != OrderStatusEnum::NewOrder->value){
            BotManager::bot()
                ->reply("‚ùó–î–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É‚ùó");
            return;
        }

        $order->status = OrderStatusEnum::InDelivery->value;
        $order->save();

        $channel = $bot->main_channel ?? null;

        $products = "–Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤";
        if (!empty($order->product_details)) {

            $products = "";

            foreach ($order->product_details as $detail) {
                $detail = (object)$detail;
                if (is_array($detail->products)) {
                    foreach ($detail->products as $product) {
                        $product = (object)$product;
                        $products .= "$product->title x$product->count = $product->price ‚ÇΩ\n";
                    }

                } else
                    $products .= "–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: $detail->products\n";

            }
        }


        $text = "<em>$products</em>\n–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: " . Carbon::parse($order->created_at)
                ->format("Y-m-d H:i:s");

     /*   if (!is_null($channel)) {
            BotMethods::bot()
                ->whereBot($bot)
                ->sendMessage(
                    $channel,
                    "‚úÖ–ó–∞–∫–∞–∑ <b>‚Ññ$order->id</b> –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É:\n\n$text"
                );

            BotManager::bot()
                ->reply("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");

        }*/

        $botUser = BotUser::query()
            ->find($order->customer_id);


        if (is_null($botUser)) {
            return;
        }

        BotMethods::bot()
            ->whereBot($bot)
            ->sendMessage(
                $botUser->telegram_chat_id,
                "–í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ$order->id</b> –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!"
            );

    }
    /**
     * @throws ValidationException
     */
    public function autoSendCashBack(...$data)
    {

        $bot = BotManager::bot()->getSelf();

        $botUser = BotUser::query()
            ->where("bot_id", $bot->id)
            ->where("telegram_chat_id", $data[3] ?? null)
            ->first();

        if (is_null($botUser)) {
            BotManager::bot()
                ->reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        $order = Order::query()
            ->where("bot_id", $bot->id)
            ->where("customer_id", $botUser->id)
            ->orderBy("created_at", "DESC")
            ->first();

        if (is_null($order)) {
            BotManager::bot()
                ->reply("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        if (($order->is_cashback_crediting ?? true) === true){
            BotManager::bot()
                ->reply("‚ùó–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π CashBack‚ùó");
            return;
        }

        $order->is_cashback_crediting = true;
        $order->save();

        $admin = BotManager::bot()->currentBotUser();

        BusinessLogic::administrative()
            ->setBot($bot)
            ->setBotUser($admin)
            ->addCashBack([
                "user_telegram_chat_id" =>$botUser->telegram_chat_id,
                "amount" => $order->summary_price,
                "info" => "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ CashBack –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞",
                "need_user_review"=>true
            ]);

        BotManager::bot()
            ->reply("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    }

    private function mediaPrint($tmp, $media, $type = null)
    {

        if (count($media) == 0) {

            $tmp .= "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!";
            BotManager::bot()
                ->reply($tmp);
            return;
        }


        $keyboard = [];
        $rowTmpKeyboard = [];
        $index = 1;
        foreach ($media as $item) {

            $tmp .= "#$item->id " . ($item->caption ?? '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ') . "\n";

            if ($index % 4 != 0) {
                $rowTmpKeyboard[] = [
                    "text" => "#" . $item->id,
                    "callback_data" => "/show_media_file $item->id"
                ];
            } else {
                $rowTmpKeyboard[] = [
                    "text" => "#" . $item->id,
                    "callback_data" => "/show_media_file $item->id"
                ];

                $keyboard[] = $rowTmpKeyboard;
                $rowTmpKeyboard = [];
            }

            $index++;
        }


        if (count($rowTmpKeyboard) > 0) {
            $keyboard[] = $rowTmpKeyboard;
        }

        if (!is_null($type))
            $keyboard[] = [
                ["text" => "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ", "callback_data" => "/remove_all_media_file $type"]
            ];

        BotManager::bot()
            ->replyInlineKeyboard("$tmp", $keyboard);
    }

    public function getNotes(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $notes = BotNote::query()
            ->where("bot_id", $bot->id)
            ->where("bot_user_id", $botUser->id)
            ->orderBy("created_at", "DESC")
            ->get();

        $tmp = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫:\n";

        if (count($notes) == 0) {

            $tmp .= "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!";
            BotManager::bot()
                ->reply($tmp);
            return;
        }


        $keyboard = [];
        $rowTmpKeyboard = [];
        $index = 1;
        foreach ($notes as $item) {
            $tmp .= "#$item->id " . ($item->text ?? '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ') . "\n";

            if ($index % 4 != 0) {
                $rowTmpKeyboard[] = [
                    "text" => "#" . $item->id . "‚ùå",
                    "callback_data" => "/remove_notes $item->id"
                ];
            } else {
                $rowTmpKeyboard[] = [
                    "text" => "#" . $item->id . "‚ùå",
                    "callback_data" => "/remove_notes $item->id"
                ];

                $keyboard[] = $rowTmpKeyboard;
                $rowTmpKeyboard = [];
            }

            $index++;
        }


        if (count($rowTmpKeyboard) > 0) {
            $keyboard[] = $rowTmpKeyboard;
        }

        $keyboard[] = [[
            "text" => "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏",
            "callback_data" => "/clear_all_notes"
        ]];

        BotManager::bot()
            ->replyInlineKeyboard("$tmp", $keyboard);

    }

    public function getMedia(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        Log::info(print_r($bot->toArray(), true));
        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where(function ($q) {
                $q->where("type", "video")
                    ->orWhere("type", "video_note");
            })
            ->get() ?? [];
        Log::info(print_r($media->toArray(), true));
        if (count($media) > 0) {
            $tmp = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:\n";
            $this->mediaPrint($tmp, $media, "video");
        }

        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("type", "photo")
            ->get();

        if (count($media) > 0) {
            $tmp .= "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:\n";
            $this->mediaPrint($tmp, $media, "photo");
        }

        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("type", "document")
            ->get() ?? [];

        if (count($media) > 0) {
            $tmp = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:\n";
            $this->mediaPrint($tmp, $media, "document");
        }

        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("type", "audio")
            ->get() ?? [];

        if (count($media) > 0) {
            $tmp = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤ –≤ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:\n";
            $this->mediaPrint($tmp, $media, "audio");
        }

        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("type", "voice")
            ->get() ?? [];

        if (count($media) > 0) {
            $tmp = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö-—Ñ–∞–π–ª–æ–≤ –≤ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:\n";
            $this->mediaPrint($tmp, $media, "voice");
        }

    }

    public function showDocument(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $id = $data[3] ?? 0;

        $document = Documents::query()
            ->where("bot_id", $bot->id)
            ->where("id", $id)
            ->first();

        if (is_null($document)) {
            BotManager::bot()
                ->reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        $keyboard = [
            [
                ["text" => "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data" => "/accept_verified_document $document->id"],
                ["text" => "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data" => "/decline_verified_document $document->id"]
            ]
        ];

        BotManager::bot()
            ->replyDocumentWithKeyboard($document->title ?? '–ù–µ —É–∫–∞–∑–∞–Ω', $document->file_id, $keyboard);
    }

    public function acceptVerifiedDocument(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $id = $data[3] ?? 0;

        $document = Documents::query()
            ->with(["botUser"])
            ->where("bot_id", $bot->id)
            ->where("id", $id)
            ->first();

        if (is_null($document)) {
            BotManager::bot()
                ->reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        $document->verified_at = Carbon::now();
        $document->save();

        $this->changeDeliverymanStatus($bot, $document->botUser);

        $thread = $bot->topics["questions"] ?? null;
        $channel = $bot->order_channel ?? null;

        BotMethods::bot()
            ->whereBot($bot)
            ->sendMessage(
                $document->botUser->telegram_chat_id,
                "–î–æ–∫—É–º–µ–Ω—Ç " . ($document->title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') . " –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
            ->sendMessage($channel, "–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç #$document->id " . ($document->title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), $thread);

    }

    public function declineVerifiedDocument(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $id = $data[3] ?? 0;

        $document = Documents::query()
            ->with(["botUser"])
            ->where("bot_id", $bot->id)
            ->where("id", $id)
            ->first();

        if (is_null($document)) {
            BotManager::bot()
                ->reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        $document->verified_at = null;
        $document->save();

        $thread = $bot->topics["questions"] ?? null;
        $channel = $bot->order_channel ?? null;

        BotMethods::bot()
            ->whereBot($bot)
            ->sendMessage(
                $document->botUser->telegram_chat_id,
                "–î–æ–∫—É–º–µ–Ω—Ç " . ($document->title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') . " –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
            ->sendMessage($channel, "–ü—Ä–æ–≤–µ—Ä–µ–Ω –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç #$document->id " . ($document->title ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), $thread);

    }

    protected function changeDeliverymanStatus($bot, $botUser)
    {
        if (is_null($botUser) || is_null($bot))
            return;

        $documents = Documents::query()
            ->where("bot_user_id", "$botUser->id")
            ->get();

        $success = false;
        foreach ($documents as $document) {
            $success &= !is_null($document->verified_at);
        }

        $thread = $bot->topics["questions"] ?? null;
        $channel = $bot->order_channel ?? null;

        if ($botUser->is_deliveryman && !$success) {
            BotMethods::bot()
                ->whereBot($bot)
                ->sendMessage(
                    $botUser->telegram_chat_id,
                    "–í–Ω–∏–º–∞–Ω–∏–µ!–í–∞—Å —Ä–∞–∑–∂–∞–ª–æ–≤–∞–ª–∏ –∏–∑ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                );
        }

        $botUser->is_deliveryman = $success;
        $botUser->save();

        $userName = BotMethods::prepareUserName($botUser);

        if ($success)
            BotMethods::bot()
                ->whereBot($bot)
                ->sendMessage(
                    $botUser->telegram_chat_id,
                    "–í–Ω–∏–º–∞–Ω–∏–µ!–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º"
                )
                ->sendMessage($channel, "–ë—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –æ–¥–æ–±—Ä–µ–Ω—ã –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ $userName –≤ –¥–æ—Å—Ç–∞–≤—â–∏–∫–∏.", $thread);

    }

    public function showMediaFile(...$data)
    {

        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $id = $data[3] ?? 0;


        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("id", $id)
            ->first();

        if (is_null($media)) {
            BotManager::bot()
                ->reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        $keyboard = [
            [
                ["text" => "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", "callback_data" => "/remove_media_file $media->id"]
            ]
        ];

        if ($media->type == "photo")
            BotManager::bot()
                ->replyPhoto($media->caption ?? null, $media->file_id, $keyboard);

        if ($media->type == "audio")
            BotManager::bot()
                ->replyAudio($media->caption ?? null, $media->file_id, $keyboard);

        if ($media->type == "document")
            BotManager::bot()
                ->replyDocumentWithKeyboard($media->caption ?? null, $media->file_id, $keyboard);

        if ($media->type == "video")
            BotManager::bot()
                ->replyVideo($media->caption ?? null, $media->file_id, $keyboard);

        if ($media->type == "video_note")
            BotManager::bot()
                ->replyVideoNote($media->file_id, $keyboard);

    }

    public function clearAllNotes(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();


        $notes = BotNote::query()
            ->where("bot_id", $bot->id)
            ->where("bot_user_id", $botUser->id)
            ->get();

        if (empty($notes)) {
            BotManager::bot()
                ->reply("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        foreach ($notes as $note) {
            $note->delete();
        }


        BotManager::bot()
            ->reply("–ó–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã");
    }

    public function removeNotes(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $id = $data[3] ?? 0;

        $note = BotNote::query()
            ->where("bot_id", $bot->id)
            ->where("id", $id)
            ->first();

        if (is_null($note)) {
            BotManager::bot()
                ->reply("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        $note->delete();
        BotManager::bot()
            ->replyInlineKeyboard("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", [
                [
                    ["text" => "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–º–µ—Ç–∫–∏", "callback_data" => "/notes"]
                ]
            ]);
    }

    public function removeAllMediaFileByType(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $type = $data[3] ?? 0;

        $medias = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("type", $type)
            ->get();

        if (count($medias) == 0) {
            BotManager::bot()
                ->reply("–ì—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç–∞");
            return;
        }

        foreach ($medias as $media)
            $media->delete();

        BotManager::bot()
            ->reply("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
    }

    public function removeMediaFile(...$data)
    {
        $botUser = BotManager::bot()
            ->currentBotUser();

        if (!$botUser->is_admin && !$botUser->is_manager) {
            BotManager::bot()
                ->reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return;
        }

        $bot = BotManager::bot()->getSelf();

        $id = $data[3] ?? 0;

        $media = BotMedia::query()
            ->where("bot_id", $bot->id)
            ->where("id", $id)
            ->first();

        if (is_null($media)) {
            BotManager::bot()
                ->reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        $media->delete();
        BotManager::bot()
            ->replyInlineKeyboard("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", [
                [
                    ["text" => "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã", "callback_data" => "/media"]
                ]
            ]);
    }


    public function helpBot(...$data)
    {
        BotManager::bot()
            ->reply("–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–æ–ª–Ω—É—é —Å–∏–ª—É!");
    }

    public function aboutBot(...$data)
    {
        $bot = BotManager::bot()->getSelf();
        BotManager::bot()
            ->replyPhoto("–•–æ—á–µ—à—å —Ç–∞–∫–æ–π –∂–µ –±–æ—Ç –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞? ",
                InputFile::create(public_path() . "/images/cashman.jpg"),
                [
                    [
                        [
                            "text" => "üî•–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫",
                            "url" => "https://t.me/cashman_dn_bot"
                        ]
                    ],
                    [
                        [
                            "text" => "\xF0\x9F\x8D\x80–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                            "web_app" => [
                                "url" => env("APP_URL") . "/bot-client/$bot->bot_domain?slug=route#/about"
                            ]
                        ],
                    ],

                ]
            );
    }
}
