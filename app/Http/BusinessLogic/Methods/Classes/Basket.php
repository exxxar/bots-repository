<?php

namespace App\Http\BusinessLogic\Methods\Classes;

use App\Enums\CashBackDirectionEnum;
use App\Enums\OrderStatusEnum;
use App\Enums\OrderTypeEnum;
use App\Events\CashBackEvent;
use App\Facades\BotMethods;
use App\Facades\BusinessLogic;
use App\Models\ActionStatus;
use App\Models\Bot;
use App\Models\BotMenuSlug;
use App\Models\BotUser;
use App\Models\Order;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Mpdf\Mpdf;
use Telegram\Bot\FileUpload\InputFile;

class Basket
{
    private array $data;

    private Bot $bot;
    private BotUser $botUser;
    private BotMenuSlug $slug;

    private mixed $uploadedImage;

    private const PAYMENT_TYPES = ["–û–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ", "–ö–∞—Ä—Ç–æ–π –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏", "–ü–µ—Ä–µ–≤–æ–¥–æ–º", "–ù–∞–ª–∏—á–Ω—ã–º–∏","–°–ë–ü"];

    public function __construct(array $data, $bot, $botUser, $slug, $uploadedImage = null)
    {
        $this->data = $data;
        $this->bot = $bot;
        $this->botUser = $botUser;
        $this->slug = $slug;
        $this->uploadedImage = $uploadedImage;

        $this->storeClientInfoAsContact();
    }

    /**
     * @return void
     */
    protected function storeClientInfoAsContact(): void
    {

        $vowels = ["(", ")", "-"];
        $filteredPhone = !is_null($this->data["phone"] ?? $this->botUser->phone ?? null) ?
            str_replace($vowels, "", $this->data["phone"] ?? $this->botUser->phone) : null;

        $this->botUser->name = $this->data["name"] ?? $this->botUser->name ?? null;
        $this->botUser->phone = $filteredPhone;
        $this->botUser->save();
    }

    private function useCashBackForPayment($discount): void
    {
        $useCashback = ($this->data["use_cashback"] ?? "false") == "true";

        if (!$useCashback)
            return;

        $adminBotUser = BotUser::query()
            ->where("bot_id", $this->bot->id)
            ->where("is_admin", true)
            ->orderBy("updated_at", "desc")
            ->first();

        if (!is_null($adminBotUser))
            BusinessLogic::administrative()
                ->setBotUser($adminBotUser)
                ->setBot($this->bot ?? null)
                ->removeCashBack([
                    "user_telegram_chat_id" => $this->botUser->telegram_chat_id,
                    "amount" => $discount ?? 0,
                    "info" => "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞",
                ]);

    }

    private function prepareDisabilities(): string
    {

        $hasDisability = ($this->data["has_disability"] ?? "false") == "true";

        $disabilities = json_decode($this->data["disabilities"] ?? '[]');
        $allergy = $this->data["allergy"] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';

        $tmpMessage = "";
        if ($hasDisability) {

            $disabilitiesText = "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> —É –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é!\n";

            foreach ($disabilities as $disability)
                $disabilitiesText .= $disability == "–ø–∏—â–µ–≤–∞—è –∞–ª–ª–µ—Ä–≥–∏—è" ? "-<em>$disability –Ω–∞: $allergy</em>\n" : "-<em>$disability</em>\n";

            $tmpMessage .= $disabilitiesText . "\n";


        }

        return $tmpMessage;
    }

    private function prepareDiscount($summaryPrice): mixed
    {


        $promo = isset($this->data["promo"]) ? json_decode($this->data["promo"]) : null;
        $useCashback = ($this->data["use_cashback"] ?? "false") == "true";

        $maxUserCashback = $this->botUser->cashback->amount ?? 0;
        $botCashbackPercent = $this->bot->max_cashback_use_percent ?? 0;
        $cashBackAmount = ($summaryPrice * ($botCashbackPercent / 100));

        if (is_null($promo))
            $promo = (object)[
                "activate_price" => 0,
                "discount" => 0,
                "code" => "–Ω–µ —É–∫–∞–∑–∞–Ω"
            ];

        $discount = ($useCashback ? min($cashBackAmount, $maxUserCashback) : 0) +
            ($summaryPrice >= ($promo->activate_price ?? 0) ? ($promo->discount ?? 0) : 0);

        return (object)[
            "discount" => $discount,
            "message" => ($discount > 0 ? "–°–∫–∏–¥–∫–∞: $discount —Ä—É–±." : "") .
                (!is_null($promo->code ?? null) ? " —Å–∫–∏–¥–∫–∞ –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥ '$promo->code' —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç $promo->discount —Ä—É–±. (—É–∂–µ —É—á—Ç–µ–Ω–∞)" : "")
        ];
    }

    private function prepareUserInfo($order, $discount)
    {


        $time = $this->data["time"] ?? null;
        $persons = $this->data["persons"] ?? 1;

        $cash = self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];
        $whenReady = ($this->data["when_ready"] ?? "false") == "true";
        $needPickup = ($this->data["need_pickup"] ?? "false") == "true";
        $useCashback = ($this->data["use_cashback"] ?? "false") == "true";
        $address = (($this->data["city"] ?? "") . "," . ($this->data["street"] ?? "") . "," . ($this->data["building"] ?? ""));


        return !$needPickup ?
            sprintf(($whenReady ? "üü¢" : "üü°") . "–ó–∞–∫–∞–∑ ‚Ññ: %s\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞: %s\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n–§.–ò.–û.: %s\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n–ê–¥—Ä–µ—Å: %s\n–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(—Ç–µ—Å—Ç): %s \n–î–∏—Å—Ç–∞–Ω—Ü–∏—è(—Ç–µ—Å—Ç): %s \n–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: %s\n–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞: %s\n–¢–∏–ø –æ–ø–ª–∞—Ç—ã: %s\n–°–¥–∞—á–∞ —Å: %s —Ä—É–±.\n–î–æ–ø.–∏–Ω—Ñ–æ: %s\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–±—ç–∫: %s\n–î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ –≤—Ä–µ–º–µ–Ω–∏:%s\n–ß–∏—Å–ª–æ –ø–µ—Ä—Å–æ–Ω: %s\n",
                $order->id ?? '-',
                $this->botUser->telegram_chat_id ?? '-',
                $this->data["name"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["phone"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $address . "," . ($this->data["flat_number"] ?? ""),
                $deliveryPrice ?? 0, //$distance
                $distance ?? 0, //$distance
                $this->data["entrance_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["floor_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $cash,
                $this->data["money"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $useCashback ? $discount : "–Ω–µ—Ç",
                ($whenReady ? "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏" : Carbon::parse($time)->format('Y-m-d H:i')),
                $persons
            ) :
            sprintf(($whenReady ? "üü¢" : "üü°") . "–ó–∞–∫–∞–∑ ‚Ññ: %s\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: %s\n–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:\n–§.–ò.–û.: %s\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n–¢–∏–ø –æ–ø–ª–∞—Ç—ã: %s\n–°–¥–∞—á–∞ —Å: %s —Ä—É–±.\n–î–æ–ø.–∏–Ω—Ñ–æ: %s\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–±—ç–∫: %s\n–ó–∞–±–µ—Ä—É –≤:%s\n–ß–∏—Å–ª–æ –ø–µ—Ä—Å–æ–Ω: %s\n",
                $order->id ?? '-',
                $this->botUser->telegram_chat_id,
                $this->data["name"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["phone"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $cash,
                $this->data["money"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $useCashback ? $discount : "–Ω–µ—Ç",
                ($whenReady ? "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏" : Carbon::parse($time)->format('Y-m-d H:i')),
                $persons
            );
    }

    private function checkWheelOfFortuneAction(): string
    {


        $actionPrize = !is_null($this->data["action_prize"] ?? null) ? json_decode($this->data["action_prize"]) : null;

        if (is_null($actionPrize))
            return "";


        /*
         *  wheel_types: [
            {
                key: "text",
                title: "–ü—Ä–∏–∑ –≤—ã–¥–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞"
            },

            {
                key: "product_discount",
                title: "–°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä—ã, %"
            },
            {
                key: "delivery_discount",
                title: "–°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, %"
            },
            {
                key: "cashback",
                title: "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—ç—à–±—ç–∫–∞, —Ä—É–±"
            },
            {
                key: "effect_product",
                title: "–°–∫–∏–¥–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä, %"
            }
        ],
         */
        $selectedPrizeDescription = $actionPrize->prize->description ?? '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–∑–∞';
        $selectedPrizeWinId = (!is_null($actionPrize->prize->win ?? null) ? json_decode($actionPrize->prize->win) : null)->id ?? null;
        $playedAt = $actionPrize->prize->played_at ?? null;

        $action = ActionStatus::query()
            ->find($actionPrize->action_id ?? null);


        $prizeText = "üé°–í—ã–∏–≥—Ä—ã—à –≤ –∫–æ–ª–µ—Å–µ —Ñ–æ—Ä—Ç—É–Ω—ã:\n";
        if (!is_null($action)) {
            $tmpData = $action->data ?? [];
            foreach ($tmpData as $index => $item) {
                $item = (object)$item;

                $itemPrizeWinId = (!is_null($item->win ?? null) ? json_decode($item->win) : null)->id ?? null;
                if ($item->description == $selectedPrizeDescription &&
                    $itemPrizeWinId == $selectedPrizeWinId &&
                    !is_null($selectedPrizeWinId)) {

                    $tmpData[$index]["taked_at"] = Carbon::now();

                    $itemPrizeType = $tmpData[$index]["type"] ?? "text";


                    $itemPrizeEffectedValue = $tmpData[$index]["effect_value"] ?? 0;
                    $itemPrizeEffectedProduct = $tmpData[$index]["effect_product"] ?? null;

                    switch ($itemPrizeType) {
                        default:
                        case "text":
                            $prizeText .= "<em><b>" . ($item->description ?? '-') . "</b></em> - —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—ã–¥–∞—á–∏\n\n";
                            break;

                        case "effect_product":
                        case "delivery_discount":
                        case "product_discount":
                            $prizeText .= "<em><b>" . ($item->description ?? '-') . "</b></em> - —É–∂–µ —É—á—Ç–µ–Ω–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n";
                            break;
                        case "cashback":

                            $adminBotUser = BotUser::query()
                                ->where("bot_id", $this->bot->id)
                                ->where("is_admin", true)
                                ->first();

                            $userId = $this->botUser->user_id;

                            if (!is_null($adminBotUser))
                                event(new CashBackEvent(
                                    (int)$this->bot->id,
                                    (int)$userId,
                                    (int)$adminBotUser->user_id,
                                    ((float)$itemPrizeEffectedValue ?? 0),
                                    "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã",
                                    CashBackDirectionEnum::Crediting
                                ));
                            break;


                    }
                }
            }
            $action->data = $tmpData;
            $action->save();
        }

        return $prizeText;
    }

    private function sendResult($message)
    {
        $userId = $this->botUser->telegram_chat_id ?? '–ù–µ —É–∫–∞–∑–∞–Ω';

        $paymentInfo = sprintf((Collection::make($this->slug->config)
            ->where("key", "payment_info")
            ->first())["value"] ?? "–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n–°–±–µ—Ä XXXX-XXXX-XXXX-XXXX –ò–≤–∞–Ω–æ–≤ –ò.–ò. –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É +7(000)000-00-00 - —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä %s\n–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º <strong>–æ–ø–ª–∞—Ç–∞</strong>",
            $userId);

        $botDomain = $this->bot->bot_domain;
        $link = "https://t.me/$botDomain?start=" . base64_encode("003" . $this->botUser->telegram_chat_id);

        $keyboard = [
            [
                ["text" => "‚úâ–†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "url" => $link]
            ]
        ];


        $thread = $this->bot->topics["delivery"] ?? null;

        BotMethods::bot()
            ->whereBot($this->bot)
            ->sendInlineKeyboard(
                $this->bot->order_channel ?? null,
                "$message\n",
                $keyboard,
                $thread
            )
            ->sendInlineKeyboard(
                $this->botUser->telegram_chat_id,
                ("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:\n\n<em>$message</em>\n\n$paymentInfo" ?? "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") .
                "\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ö—ç—à–ë—ç–∫!",
                [
                    [
                        ["text" => "üì¢–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ", "web_app" => [
                            "url" => env("APP_URL") . "/bot-client/simple/" . $this->bot->bot_domain . "?slug=route&hide_menu#/s/feedback"
                        ]],
                    ],
                ]
            );
    }

    private function prepareAddress(): string
    {


        return (($this->data["city"] ?? "") . "," . ($this->data["street"] ?? "") . "," . ($this->data["building"] ?? ""));
    }

    private function printPDFInfo($order, $summaryPrice, $summaryCount, $tmpOrderProductInfo, $discount)
    {


        $useCashback = ($this->data["use_cashback"] ?? "false") == "true";
        $cash =  self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];

        $address = $this->prepareAddress();

        $userId = $this->botUser->telegram_chat_id ?? '–ù–µ —É–∫–∞–∑–∞–Ω';

        $paymentInfo = sprintf((Collection::make($this->slug->config)
            ->where("key", "payment_info")
            ->first())["value"] ?? "–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n–°–±–µ—Ä XXXX-XXXX-XXXX-XXXX –ò–≤–∞–Ω–æ–≤ –ò.–ò. –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É +7(000)000-00-00 - —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä %s\n–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º <strong>–æ–ø–ª–∞—Ç–∞</strong>",
            $userId);

        $mpdf = new Mpdf();
        $current_date = Carbon::now("+3:00")->format("Y-m-d H:i:s");

        $number = Str::uuid();


        $mpdf->WriteHTML(view("pdf.order", [
            "title" => $this->bot->title ?? $this->bot->bot_domain ?? 'CashMan',
            "uniqNumber" => $number,
            "orderId" => $order->id,
            "name" => $order->receiver_name,
            "phone" => $order->receiver_phone,
            "address" => $address . "," . ($this->data["flat_number"] ?? ""),
            "message" => ($this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "entranceNumber" => ($this->data["entrance_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "floorNumber" => ($this->data["floor_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "cashType" => $cash,
            "money" => ($this->data["money"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "disabilitiesText" => ($disabilitiesText ?? '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'),
            "totalPrice" => $summaryPrice,
            "discount" => $useCashback ? $discount : 0,
            "totalCount" => $summaryCount,
            "distance" => $distance ?? 0, //$distance
            "deliveryPrice" => $deliveryPrice ?? 0, //—Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            "currentDate" => $current_date,
            "code" => "–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
            "promoCount" => "0",
            "paymentInfo" => $paymentInfo,
            "products" => $tmpOrderProductInfo,
            "info" => $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        ]));

        $file = $mpdf->Output("order-$number.pdf", \Mpdf\Output\Destination::STRING_RETURN);


        BotMethods::bot()
            ->whereBot($this->bot)
            ->sendDocument(
                $this->botUser->telegram_chat_id,
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #" . ($order->id ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                InputFile::createFromContents($file, "invoice.pdf")
            );
    }

    private function prepareFrontPad($order, $tmpOrderProductInfo)
    {

        if (is_null($this->bot->frontPad ?? null))
            return;

        $persons = $this->data["persons"] ?? 1;
        $whenReady = ($this->data["when_ready"] ?? "false") == "true";
        $time = $this->data["time"] ?? null;
        $cash =  self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];

        BusinessLogic::frontPad()
            ->setBot($this->bot)
            ->setBotUser($this->botUser)
            ->newOrder([
                "products" => $tmpOrderProductInfo,
                "phone" => $order->receiver_phone,
                "descr" => $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                "name" => $order->receiver_name,
                "home" => ($this->data["building"] ?? ""),
                "street" => ($this->data["street"] ?? ""),
                'pod' => ($this->data["entrance_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'et' => ($this->data["floor_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'apart' => ($this->data["flat_number"] ?? ""),
                'person' => $persons,
                'datetime' => ($whenReady ? null
                    : Carbon::parse($time)->format('Y-m-d H:i:s')),
                'cash' => $cash
            ]);
    }

    private function prepareDeliveryNote(): string
    {


        $disabilitiesText = $this->prepareDisabilities();

        $persons = $this->data["persons"] ?? 1;
        $whenReady = ($this->data["when_ready"] ?? "false") == "true";
        $cash =  self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];

        $time = $this->data["time"] ?? null;

        $this->botUser->city = $this->data["city"] ?? $this->botUser->city ?? null;
        $this->botUser->address = ($this->data["street"] ?? "") . "," . ($this->data["building"] ?? "");
        $this->botUser->save();

        return ($this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ') . "\n"
            . (is_null($this->data["entrance_number"] ?? null) ? "–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: " . $this->data["entrance_number"] . "\n" : "")
            . (is_null($this->data["floor_number"] ?? null) ? "–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞: " . $this->data["floor_number"] . "\n" : "")
            . "–¢–∏–ø –æ–ø–ª–∞—Ç—ã: " . $cash . "\n"
            . (is_null($this->data["money"] ?? null) ? "–°–¥–∞—á–∞ —Å: " . $this->data["money"] . "\n" : "")
            . "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:" . ($whenReady ? "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏" : Carbon::parse($time)->format('Y-m-d H:i')) . "\n"
            . "–ß–∏—Å–ª–æ –ø–µ—Ä—Å–æ–Ω:" . $persons . "\n"
            . "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n" . ($disabilitiesText ?? '–Ω–µ —É–∫–∞–∑–∞–Ω—ã');
    }

    private function sendPaidReceiptToChannel($order)
    {
        $uploadedPhoto = $this->uploadedImage;


        if (is_null($uploadedPhoto))
            return;

        $whenReady = ($this->data["when_ready"] ?? "false") == "true";

        $ext = $uploadedPhoto->getClientOriginalExtension();

        $imageName = Str::uuid() . "." . $ext;

        $uploadedPhoto->storeAs("$imageName");

        $thread = $this->bot->topics["orders"] ?? null;

        $historyLink = "https://t.me/" . ($this->bot->bot_domain) . "?start=" . (
            !is_null($order) ?
                base64_encode("001" . ($this->botUser->telegram_chat_id) . "O" . $order->id) :
                base64_encode("001" . ($this->botUser->telegram_chat_id))
            );

        $channel = $this->bot->order_channel ?? $this->bot->main_channel ?? null;

        BotMethods::bot()
            ->whereBot($this->bot)
            ->sendPhoto(
                $channel,
                "#–æ–ø–ª–∞—Ç–∞—á–µ–∫–æ–º\n" .
                ($whenReady ? "üü¢" : "üü°") . "–ó–∞–∫–∞–∑ ‚Ññ:" . ($order->id ?? '-') . "\n" .
                "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞: " . ($this->botUser->telegram_chat_id ?? '-') . "\n" .
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " . ($order->receiver_name ?? '-') . "\n" .
                "–¢–µ–ª–µ—Ñ–æ–Ω: " . ($order->receiver_phone ?? '-') . "\n\n" .
                "–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ–ø–ª–∞—Ç–µ: " . ($this->data["image_info"] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                InputFile::create(storage_path() . "/app/$imageName"), [
                [
                    ["text" => "üìú–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "url" => $historyLink]
                ],

            ],
                $thread
            );

    }

    /**
     * @throws ValidationException
     */
    public function handler()
    {


        $needPickup = ($this->data["need_pickup"] ?? "false") == "true";
        $deliveryPrice = $this->data["delivery_price"] ?? 0;
        $paymentType = $this->data["payment_type"] ?? 4;

        $message = (!$needPickup ? "#–∑–∞–∫–∞–∑–¥–æ—Å—Ç–∞–≤–∫–∞\n\n" : "#–∑–∞–∫–∞–∑—Å–∞–º–æ–≤—ã–≤–æ–∑\n\n");
        $message .= $this->checkWheelOfFortuneAction();
        $message .= $this->prepareDisabilities();

        $basket = \App\Models\Basket::query()
            ->where("bot_id", $this->bot->id)
            ->where("bot_user_id", $this->botUser->id)
            ->whereNull("ordered_at")
            ->get();

        $summaryPrice = 0;
        $summaryCount = 0;

        $tmpOrderProductInfo = [];

        $ids = [];

        foreach ($basket as $item) {


            $product = $item->product ?? null;
            $collection = $item->collection ?? null;

            $price = 0;

            if (!is_null($product)) {
                $price = ($product->current_price ?? 0) * $item->count;
                $message .= sprintf("üíé%s x%s=%s —Ä—É–±.\n",
                    $product->title,
                    $item->count,
                    $price
                );

                $tmpOrderProductInfo[] = (object)[
                    "title" => $product->title,
                    "count" => $item->count,
                    "price" => $price,
                    'frontpad_article' => $product->frontpad_article ?? null,
                    'iiko_article' => $product->iiko_article ?? null,
                ];


                if (!in_array($product->id, $ids)) {
                    $ids[] = $product->id;
                }

            }

            if (!is_null($collection)) {
                $collectionTitles = "";

                /*
                * 'params' => (object)[
               "variant_id" => Str::uuid(),
               "ids" => $ids->toArray()
           ],
                */

                $params = is_null($item->params ?? null) ? null : (object)$item->params;

                foreach (($collection->products ?? []) as $product) {

                    if (!in_array($product->id, $params->ids ?? []))
                        continue;

                    $collectionTitles .= "-" . $product->title . "\n";

                    $tmpOrderProductInfo[] = (object)[
                        "title" => "–ö–æ–ª–ª–µ–∫—Ü–∏—è `" . ($collection->title) . "`: " . $product->title,
                        "count" => 1,
                        "price" => $product->current_price ?? 0,
                        'frontpad_article' => $product->frontpad_article ?? null,
                        'iiko_article' => $product->iiko_article ?? null,
                    ];

                    $price += $product->current_price ?? 0;

                    if (!in_array($product->id, $ids)) {
                        $ids[] = $product->id;
                    }

                }

                $price = $price * $item->count;
                $message .= sprintf("üíé–ö–æ–ª–ª–µ–∫—Ü–∏—è `%s` x%s=%s —Ä—É–±.:\n%s\n",
                    ($collection->title),
                    $item->count,
                    $price,
                    $collectionTitles,
                );


            }

            $summaryCount += $item->count;
            $summaryPrice += $price;
        }

        $deliveryNote = $this->prepareDeliveryNote();

        $discountItem = $this->prepareDiscount($summaryPrice);

        $this->useCashBackForPayment($discountItem->discount ?? 0);


        $order = Order::query()->create([
            'bot_id' => $this->bot->id,
            'deliveryman_id' => null,
            'customer_id' => $this->botUser->id,
            'delivery_service_info' => null,//–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            'deliveryman_info' => null,//–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤—â–∏–∫–µ
            'product_details' => [
                (object)[
                    "from" => $this->bot->title ?? $this->bot->bot_domain ?? $this->bot->id,
                    "products" => $tmpOrderProductInfo
                ]
            ],//–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–∏, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–Ω –∑–∞–∫–∞–∑
            'product_count' => $summaryCount,
            'summary_price' => $summaryPrice,
            'delivery_price' => $deliveryPrice,
            'delivery_range' => $distance ?? 0,
            'deliveryman_latitude' => 0,
            'deliveryman_longitude' => 0,
            'delivery_note' => $deliveryNote,
            'receiver_name' => $this->data["name"] ?? '–ù–µ—Ç –∏–º–µ–Ω–∏',
            'receiver_phone' => $this->data["phone"] ?? '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            'address' => $this->prepareAddress() . "," . ($this->data["flat_number"] ?? ""),
            'receiver_latitude' => $geo->latitude ?? 0,
            'receiver_longitude' => $geo->longitude ?? 0,

            'status' => OrderStatusEnum::NewOrder->value,//–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –≤–∑—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –æ—Ç–º–µ–Ω–µ–Ω
            'order_type' => OrderTypeEnum::InternalStore->value,//—Ç–∏–ø –∑–∞–∫–∞–∑–∞: –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            'payed_at' => Carbon::now(),
        ]);

        $this->prepareFrontPad($order, $tmpOrderProductInfo);

        BusinessLogic::review()
            ->setBotUser($this->botUser)
            ->setBot($this->bot)
            ->prepareReviews($order->id, $ids);


        $message .= $discountItem->message ?? '';

        $message .= "–ò—Ç–æ–≥–æ: $summaryPrice —Ä—É–±. –∑–∞ $summaryCount –µ–¥. \n\n";

        $message .= $this->prepareUserInfo($order, $discountItem->discount ?? 0);


        $needBill = false;
        switch ($paymentType) {
            case 0:
                BusinessLogic::payment()
                    ->setBot($this->bot)
                    ->setBotUser($this->botUser)
                    ->setSlug($this->slug)
                    ->checkout();
                //—Å—Å—ã–ª–∫–∞
                break;
            case 1:
                //–∫–∞—Ä—Ç–æ–π –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
            case 2:
                //–ø–µ—Ä–µ–≤–æ–¥–æ–º
            case 3:
                //–Ω–∞–ª–∏—á–Ω—ã–º–∏
                $needBill = true;
                break;
            case 4:
                BusinessLogic::payment()
                    ->setBot($this->bot)
                    ->setBotUser($this->botUser)
                    ->setSlug($this->slug)
                    ->sbp($order);
                break;

        }
        if ($needBill)
            $this->printPDFInfo(
                order: $order,
                summaryPrice: $summaryPrice,
                summaryCount: $summaryCount,
                tmpOrderProductInfo: $tmpOrderProductInfo,
                discount: $discountItem->discount
            );

        $this->sendResult($message);
        $this->sendPaidReceiptToChannel($order);
    }
}
