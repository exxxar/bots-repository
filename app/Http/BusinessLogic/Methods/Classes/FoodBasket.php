<?php

namespace App\Http\BusinessLogic\Methods\Classes;

use App\Facades\BotMethods;
use App\Facades\BusinessLogic;
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Mpdf\Mpdf;
use Telegram\Bot\FileUpload\InputFile;

trait FoodBasket
{
    private function fsPrepareDisabilities(): string
    {

        $hasDisability = ($this->data["has_disability"] ?? "false") == "true";

        $disabilities = json_decode($this->data["disabilities"] ?? '[]');
        $allergy = $this->data["allergy"] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';

        $tmpMessage = "";
        if ($hasDisability) {

            $disabilitiesText = "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> —É –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é!\n";

            foreach ($disabilities as $disability)
                $disabilitiesText .= $disability == "–ø–∏—â–µ–≤–∞—è –∞–ª–ª–µ—Ä–≥–∏—è" ? "-<em>$disability –Ω–∞: $allergy</em>\n" : "-<em>$disability</em>\n";

            $tmpMessage .= $disabilitiesText . "\n";


        }

        return $tmpMessage;
    }

    private function fsPrepareUserInfo($order, $discount)
    {


        $time = $this->data["time"] ?? null;
        $persons = $this->data["persons"] ?? 1;

        $cash = self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];
        $whenReady = ($this->data["when_ready"] ?? "false") == "true";
        $needPickup = ($this->data["need_pickup"] ?? "false") == "true";
        $useCashback = ($this->data["use_cashback"] ?? "false") == "true";
        $address = (($this->data["city"] ?? "") . "," . ($this->data["street"] ?? "") . "," . ($this->data["building"] ?? ""));


        return !$needPickup ?
            sprintf("\n\n".($whenReady ? "üü¢" : "üü°") . " –ó–∞–∫–∞–∑ ‚Ññ: %s\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞: %s\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n–§.–ò.–û.: %s\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n–ê–¥—Ä–µ—Å: %s\n–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: %s —Ä—É–±.\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: %s –∫–º\n–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: %s\n–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞: %s\n–¢–∏–ø –æ–ø–ª–∞—Ç—ã: <b>%s</b>\n–°–¥–∞—á–∞ —Å: %s —Ä—É–±.\n–î–æ–ø.–∏–Ω—Ñ–æ: %s\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–±—ç–∫: %s\n–î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ –≤—Ä–µ–º–µ–Ω–∏:%s\n–ß–∏—Å–ª–æ –ø–µ—Ä—Å–æ–Ω: %s\n",
                $order->id ?? '-',
                $this->botUser->telegram_chat_id ?? '-',
                $this->data["name"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["phone"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $address . "," . ($this->data["flat_number"] ?? ""),
                $order->delivery_price ?? 0,
                $order->delivery_range ?? 0,
                $this->data["entrance_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["floor_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $cash,
                $this->data["money"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $useCashback ? $discount : "–Ω–µ—Ç",
                ($whenReady ? "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏" : Carbon::parse($time)->format('Y-m-d H:i')),
                $persons
            ) :
            sprintf("\n\n".($whenReady ? "üü¢" : "üü°") . "–ó–∞–∫–∞–∑ ‚Ññ: %s\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: %s\n–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:\n–§.–ò.–û.: %s\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n–¢–∏–ø –æ–ø–ª–∞—Ç—ã: <b>%s</b>\n–°–¥–∞—á–∞ —Å: %s —Ä—É–±.\n–î–æ–ø.–∏–Ω—Ñ–æ: %s\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–±—ç–∫: %s\n–ó–∞–±–µ—Ä—É –≤:%s\n–ß–∏—Å–ª–æ –ø–µ—Ä—Å–æ–Ω: %s\n",
                $order->id ?? '-',
                $this->botUser->telegram_chat_id,
                $this->data["name"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["phone"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $cash,
                $this->data["money"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                $useCashback ? $discount : "–Ω–µ—Ç",
                ($whenReady ? "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏" : Carbon::parse($time)->format('Y-m-d H:i')),
                $persons
            );
    }

    private function fsSendResult($message)
    {

        sleep(1);
        BotMethods::bot()
            ->whereBot($this->bot)
            ->sendInlineKeyboard(
                $this->botUser->telegram_chat_id,
                ("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ:\n\n<em>$message</em>" ?? "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") .
                "\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ö—ç—à–ë—ç–∫!",
                [
                    [
                        ["text" => "üì¢–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ", "web_app" => [
                            "url" => env("APP_URL") . "/bot-client/simple/" . $this->bot->bot_domain . "?slug=route&hide_menu#/s/feedback"
                        ]],
                    ],
                ]
            );
    }

    private function fsPrepareAddress(): string
    {


        return (($this->data["city"] ?? "") . "," . ($this->data["street"] ?? "") . "," . ($this->data["building"] ?? ""));
    }

    private function fsPrintPDFInfo($order, $summaryPrice, $summaryCount, $tmpOrderProductInfo, $discount)
    {


        $useCashback = ($this->data["use_cashback"] ?? "false") == "true";
        $cash =  self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];

        $address = $this->fsPrepareAddress();

        $userId = $this->botUser->telegram_chat_id ?? '–ù–µ —É–∫–∞–∑–∞–Ω';

        $paymentInfo = sprintf((Collection::make($this->slug->config)
            ->where("key", "payment_info")
            ->first())["value"] ?? "–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n–°–±–µ—Ä XXXX-XXXX-XXXX-XXXX –ò–≤–∞–Ω–æ–≤ –ò.–ò. –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É +7(000)000-00-00 - —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä %s\n–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º <strong>–æ–ø–ª–∞—Ç–∞</strong>",
            $userId);

        $mpdf = new Mpdf();
        $current_date = Carbon::now("+3:00")->format("Y-m-d H:i:s");

        $number = Str::uuid();


        $mpdf->WriteHTML(view("pdf.order", [
            "title" => $this->bot->title ?? $this->bot->bot_domain ?? 'CashMan',
            "uniqNumber" => $number,
            "orderId" => $order->id,
            "name" => $order->receiver_name,
            "phone" => $order->receiver_phone,
            "address" => $address . "," . ($this->data["flat_number"] ?? ""),
            "message" => ($this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "entranceNumber" => ($this->data["entrance_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "floorNumber" => ($this->data["floor_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "cashType" => $cash,
            "money" => ($this->data["money"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "disabilitiesText" => ($disabilitiesText ?? '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'),
            "totalPrice" => $summaryPrice,
            "discount" => $useCashback ? $discount : 0,
            "totalCount" => $summaryCount,
            "distance" => $distance ?? 0, //$distance
            "deliveryPrice" => $deliveryPrice ?? 0, //—Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            "currentDate" => $current_date,
            "code" => "–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
            "promoCount" => "0",
            "paymentInfo" => $paymentInfo,
            "products" => $tmpOrderProductInfo,
            "info" => $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        ]));

        $file = $mpdf->Output("order-$number.pdf", \Mpdf\Output\Destination::STRING_RETURN);


        sleep(1);
        BotMethods::bot()
            ->whereBot($this->bot)
            ->sendDocument(
                $this->botUser->telegram_chat_id,
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #" . ($order->id ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                InputFile::createFromContents($file, "invoice.pdf")
            );
    }

    private function fsPrepareFrontPad($order, $tmpOrderProductInfo)
    {

        if (is_null($this->bot->frontPad ?? null))
            return;

        $persons = $this->data["persons"] ?? 1;
        $whenReady = ($this->data["when_ready"] ?? "false") == "true";
        $time = $this->data["time"] ?? null;
        $cash =  self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];

        BusinessLogic::frontPad()
            ->setBot($this->bot)
            ->setBotUser($this->botUser)
            ->newOrder([
                "products" => $tmpOrderProductInfo,
                "phone" => $order->receiver_phone,
                "descr" => $this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                "name" => $order->receiver_name,
                "home" => ($this->data["building"] ?? ""),
                "street" => ($this->data["street"] ?? ""),
                'pod' => ($this->data["entrance_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'et' => ($this->data["floor_number"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'apart' => ($this->data["flat_number"] ?? ""),
                'person' => $persons,
                'datetime' => ($whenReady ? null
                    : Carbon::parse($time)->format('Y-m-d H:i:s')),
                'cash' => $cash
            ]);
    }

    private function fsPrepareDeliveryNote(): string
    {


        $disabilitiesText = $this->fsPrepareDisabilities();

        $persons = $this->data["persons"] ?? 1;
        $whenReady = ($this->data["when_ready"] ?? "false") == "true";
        $cash =  self::PAYMENT_TYPES[$this->data["payment_type"] ?? 0];

        $time = $this->data["time"] ?? null;

        $this->botUser->city = $this->data["city"] ?? $this->botUser->city ?? null;
        $this->botUser->address = ($this->data["street"] ?? "") . "," . ($this->data["building"] ?? "");
        $this->botUser->save();

        return ($this->data["info"] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ') . "\n"
            . (is_null($this->data["entrance_number"] ?? null) ? "–ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: " . $this->data["entrance_number"] . "\n" : "")
            . (is_null($this->data["floor_number"] ?? null) ? "–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞: " . $this->data["floor_number"] . "\n" : "")
            . "–¢–∏–ø –æ–ø–ª–∞—Ç—ã: " . $cash . "\n"
            . (is_null($this->data["money"] ?? null) ? "–°–¥–∞—á–∞ —Å: " . $this->data["money"] . "\n" : "")
            . "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:" . ($whenReady ? "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏" : Carbon::parse($time)->format('Y-m-d H:i')) . "\n"
            . "–ß–∏—Å–ª–æ –ø–µ—Ä—Å–æ–Ω:" . $persons . "\n"
            . "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n" . ($disabilitiesText ?? '–Ω–µ —É–∫–∞–∑–∞–Ω—ã');
    }
}
