<?php

namespace App\Classes;

use Illuminate\Support\Facades\Storage;

class BotMessageService
{
    protected string $file = 'bot_messages.json';
    protected object|null $bot = null;
    protected object|null $user = null;

    protected array $keyDict = [
        'name' => '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'cash_back' => '–°—É–º–º–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'age' => '–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞',
        'amount' => '–í–µ–ª–∏—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–ø–∏—Å–∞–Ω–∏—è \ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)',
        'rule_value' => '–í–µ–ª–∏—á–∏–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –ø—Ä–∞–≤–∏–ª–µ',
        'level_index' => '–ò–Ω–¥–µ–∫—Å —É—Ä–æ–≤–Ω—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è \ —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤',
        'admin_name' => '–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
        'user_link' => '–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
    ];

    protected array $defaultMessages = [
        'welcome' => '–ü—Ä–∏–≤–µ—Ç, {{name}}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.',
        'balance' => '–í–∞—à –∫—ç—à–±—ç–∫: {{cash_back}} —Ä—É–±.',
        'age_info' => '–í–∞–º {{age}} –ª–µ—Ç.',
        'not_admin' => '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞! –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!',
        'need_review_mark' => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ!",
        'success_cashback_deduct' => '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–ª–∏ {{amount}}',
        'cashback_warn_1' => '–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è CashBack {{amount}} —Ä—É–±.\n',
        'cashback_warn_2' => '–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ —á–µ–∫–∞ {{amount}} —Ä—É–±. > {{rule_value}} —Ä—É–± (–¥–ª—è —É—Ä–æ–≤–Ω—è {{level_index}})\n',
        'cashback_warn_3' => '–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è CashBack {{amount}} —Ä—É–±.  > {{rule_value}} —Ä—É–± (–¥–ª—è —É—Ä–æ–≤–Ω—è {{level_index}}) \n',
        'cashback_warn_4' => '–í–∞–º –Ω–∞—á–∏—Å–ª–∏–ª–∏ <b>{{amount}} —Ä—É–±.</b> CashBack {{level_index}} —É—Ä–æ–≤–Ω—è',
        'cashback_warn_5' => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {{admin_name}} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª <b>  {{amount}} —Ä—É–±.</b> ({{level_index}} —É—Ä–æ–≤–Ω—è) CashBa—Åk –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {{name}} {{user_link}}',
        'cashback_warn_6' => 'üö®üö®üö®üö®\n$this->warnText\n–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º $nameAdmin ($tgAdminId) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $nameUser ($tgUserId)'
    ];

    public function query($bot): static
    {
        $this->bot = $bot;
        return $this;
    }


    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function setBotUser($user): self
    {
        $this->user = $user;
        return $this;
    }

    public function message(string $key, array $params = []): string
    {
        return $this->getMessage($key, $params);
    }

    public function getDictionary(): array{
        return $this->keyDict ?? [];
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
     */
    public function getMessages(): array
    {
        $messages = $this->loadMessages();

        $botDomain = $this->bot->bot_domain ?? 'default';

        $tmpMessages = [];

        foreach ($messages[$botDomain] ?? [] as $key => $value)
            $tmpMessages[$key] = $value;

        foreach ($this->defaultMessages ?? [] as $key => $value)
            if (!isset($tmpMessages[$key]))
                $tmpMessages[$key] = $value;


        return $tmpMessages;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
     */
    public function getMessage(string $key, array $params = []): string
    {
        $messages = $this->loadMessages();

        $botDomain = $this->bot->bot_domain ?? 'default';

        $text = $messages[$botDomain][$key]
            ?? $this->defaultMessages[$key]
            ?? "[[$key not found]]";

        return $this->processMessage($text, $params);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
     */
    public function saveMessages(array $messages): void
    {
        $botDomain = $this->bot->bot_domain ?? 'default';

        $all = $this->loadMessages();
        $all[$botDomain] = $messages;
        $this->storeMessages($all);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function saveMessage(string $key, string $text): void
    {

        $botDomain = $this->bot->bot_domain ?? 'default';

        $all = $this->loadMessages();
        $all[$botDomain][$key] = $text;
        $this->storeMessages($all);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∏–∑ storage
     */
    protected function loadMessages(): array
    {
        if (!Storage::exists($this->file)) {
            return [];
        }

        return json_decode(Storage::get($this->file), true) ?? [];
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –≤ storage
     */
    protected function storeMessages(array $messages): void
    {
        Storage::put($this->file, json_encode($messages, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ {{name}}, {{age}}, {{cashBack}}
     */
    protected function processMessage(string $text, array $params = []): string
    {
        $localParams = [

        ];
        $replacements = array_merge($localParams, $params);

        foreach ($replacements as $key => $value) {
            $text = str_replace('{{' . $key . '}}', $value, $text);
        }

        return $text;
    }
}
