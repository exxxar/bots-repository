<?php

namespace App\Listeners;

use App\Enums\CashBackDirectionEnum;
use App\Events\CashBackEvent;
use App\Events\CashBackSubEvent;
use App\Facades\BotMethods;
use App\Models\Bot;
use App\Models\BotUser;
use App\Models\CashBack;
use App\Models\CashBackHistory;
use App\Models\CashBackSub;
use App\Models\User;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Api;

class CashBackSystemListener
{


    protected $warnings;

    protected $warnText;

    /**
     * Create the event listener.
     */
    public function __construct()
    {
        $this->warnText = "";
    }

    /**
     * Handle the event.
     */
    public function handle(CashBackSubEvent $event): void
    {

        if (is_null($event))
            return;

        $bot = Bot::query()
            ->where("id", $event->botId)
            ->first();


        $this->warnings = $bot->warnings ?? [];

        $botUserAdmin = BotUser::query()
            ->with(["user"])
            ->where("bot_id", $event->botId)
            ->where("user_id", $event->adminId)
            ->first();

        $botUserUser = BotUser::query()
            ->with(["user", "parent"])
            ->where("bot_id", $event->botId)
            ->where("user_id", $event->userId)
            ->first();


        if (is_null($botUserUser) || is_null($botUserAdmin))
            return;

        $botUserUser->user_in_location = false;
        $botUserUser->location_comment = null;
        $botUserUser->save();

        if (!$botUserAdmin->is_admin) {
            BotMethods::bot()
                ->whereId($event->botId)
                ->sendMessage(
                    $botUserAdmin->telegram_chat_id,
                    "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞! –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!",
                );
            return;
        }


        $cashBack = CashBack::query()
            ->firstOrCreate([
                'user_id' => $event->userId,
                'bot_id' => $event->botId,
                'bot_user_id' => $botUserUser->id,
            ], [
                'amount' => 0,
            ]);


        $cashBackSub = CashBackSub::query()->firstOrCreate([
            'cash_back_id' => $cashBack->id,
            'title' => $event->title,
        ], [
            'amount' => 0,
        ]);


        if ($event->directionEnum == CashBackDirectionEnum::Crediting) {

            $percent = $event->percent ?? $bot->level_1 ?? env("BASE_CASHBACK_LEVEL_1") ?? 0;

            $tmpAmount = $event->amount * ($percent / 100);
            $cashBackSub->amount += $tmpAmount;
            $cashBackSub->save();

            $name = BotMethods::prepareUserName($botUserUser);

            BotMethods::bot()
                ->whereId($event->botId)
                ->sendMessage(
                    $botUserUser->telegram_chat_id,
                    "–í–∞–º –Ω–∞—á–∏—Å–ª–∏–ª–∏ <b>$tmpAmount —Ä—É–±.</b> CashBack –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"$event->title\"",
                )
                ->sendMessage(
                    $botUserAdmin->telegram_chat_id,
                    "–í—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ <b>$tmpAmount —Ä—É–±.</b> CashBack –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é $name –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"$event->title\"",
                );

            $this->checkWarnings($event->amount, CashBackDirectionEnum::None, 1);
            $this->checkWarnings($tmpAmount, CashBackDirectionEnum::Crediting, 1);

            CashBackHistory::query()->create([
                'money_in_check' => $event->amount,
                'amount' => $tmpAmount,
                'level' => 1,
                'description' => "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ CashBack 1 —É—Ä–æ–≤–Ω—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"$event->title\"",
                'operation_type' => 1,
                'user_id' => $botUserUser->user_id,
                'bot_id' => $event->botId,
                'employee_id' => $botUserAdmin->user_id,
            ]);

            if ($event->needUserReview)
                BotMethods::bot()
                    ->whereBot($bot)
                    ->sendInlineKeyboard(
                        $botUserUser->telegram_chat_id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ!", [
                            [
                                ["text" => "üò°", "callback_data" => "/send_review 0"],
                                ["text" => "üòï", "callback_data" => "/send_review 1"],
                                ["text" => "üòê", "callback_data" => "/send_review 2"],
                                ["text" => "üôÇ", "callback_data" => "/send_review 3"],
                                ["text" => "üòÅ", "callback_data" => "/send_review 4"],
                            ]
                        ]
                    );
        }

        if ($event->directionEnum == CashBackDirectionEnum::Debiting) {
            if ($cashBackSub->amount - $event->amount < 0) {
                BotMethods::bot()
                    ->whereId($event->botId)
                    ->sendMessage(
                        $botUserAdmin->telegram_chat_id,
                        "–ù–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å—á–µ—Ç—É \"$cashBackSub->title\" –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CashBack –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.–ù–∞ –±–∞–ª–∞–Ω—Å–µ <b>$cashBackSub->amount  —Ä—É–±.</b>, –∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è <b>$event->amount  —Ä—É–±.</b>"
                    );
                sleep(1);
                BotMethods::bot()
                    ->whereId($event->botId)
                    ->sendMessage(
                        $botUserUser->telegram_chat_id,
                        "–ù–∞ –≤–∞—à–µ–º c–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å—á–µ—Ç—É \"$cashBackSub->title\" –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CashBack –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.–£ –≤–∞—Å <b>$cashBackSub->amount  —Ä—É–±.</b>, –∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è <b>$event->amount  —Ä—É–±.</b>",
                    );

                return;
            }

            $cashBackSub->amount -= $event->amount;
            $cashBackSub->save();

            $this->checkWarnings($event->amount, CashBackDirectionEnum::Debiting);

            $tmpUser = BotMethods::prepareUserName($botUserUser);
            $tmpAdmin = BotMethods::prepareUserName($botUserAdmin);

            CashBackHistory::query()->create([
                'money_in_check' => 0,
                'amount' => $event->amount,
                'level' => 1,
                'description' => "–°–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ CashBack –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $cashBackSub->title: $event->info",
                'operation_type' => 0,
                'user_id' => $event->userId,
                'bot_id' => $event->botId,
                'employee_id' => $event->adminId,
            ]);


            BotMethods::bot()
                ->whereId($event->botId)
                ->sendMessage(
                    $botUserAdmin->telegram_chat_id,
                    "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–ª–∏ <b>  $event->amount —Ä—É–±.</b> CashBack —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $tmpUser —Å –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞",
                );

            sleep(1);

            BotMethods::bot()
                ->whereId($event->botId)
                ->sendMessage(
                    $botUserUser->telegram_chat_id,
                    "–° –≤–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ \"$cashBackSub->title\" —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ <b>$event->amount —Ä—É–±.</b> CashBack. –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä $tmpAdmin",
                );

        }

        if (strlen($this->warnText) > 0) {
            $tgAdminId = $botUserAdmin->telegram_chat_id ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            $tgUserId = $botUserUser->telegram_chat_id ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            $nameAdmin = BotMethods::prepareUserName($botUserAdmin);
            $nameUser = BotMethods::prepareUserName($botUserUser);

            $thread = $bot->topics["cashback"] ?? null;

            sleep(1);
            BotMethods::bot()
                ->whereBot($bot)
                ->sendMessage(
                    $bot->order_channel ?? null,
                    "üö®üö®üö®üö®\n$this->warnText\n–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º $nameAdmin ($tgAdminId) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $nameUser ($tgUserId)",
                    $thread
                );
        }


    }

    private function checkWarnings($amount, $direction, $levelIndex = null)
    {


        if (empty($this->warnings))
            return;

        foreach ($this->warnings as $warn) {
            if (!$warn->is_active)
                continue;

            if ($warn->rule_key == "bill_sum_more_then"
                && $amount >= $warn->rule_value
                && $direction == CashBackDirectionEnum::None
            ) {

                $this->warnText .= "–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ —á–µ–∫–∞ $amount —Ä—É–±. > $warn->rule_value —Ä—É–± (–¥–ª—è —É—Ä–æ–≤–Ω—è $levelIndex)\n";
            }

            if ($warn->rule_key == "cashback_up_sum_more_then"
                && $amount >= $warn->rule_value
                && $direction == CashBackDirectionEnum::Crediting

            ) {
                $this->warnText .= "–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è CashBack $amount —Ä—É–±.  > $warn->rule_value —Ä—É–± (–¥–ª—è —É—Ä–æ–≤–Ω—è $levelIndex) \n";
            }

            if ($warn->rule_key == "cashback_down_sum_more_then"
                && $amount >= $warn->rule_value
                && $direction == CashBackDirectionEnum::Debiting
            ) {
                $this->warnText .= "–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è CashBack $amount —Ä—É–±.\n";
            }
        }

    }


}
