/*
 * Курсовая работа \"Разработка базы данных для веб-системы аренды домов\"
 * Автор работы: Кищенко Кирилл Александрович Это API предназначено для управления арендой домов.  Оно предоставляет функционал для работы с категориями домов,  арендаторами, платежами и настройками системы.  Каждый дом может быть отнесен к одной из категорий, и может  иметь множество арендаторов. Платежи связаны с арендаторами,  а система настроек позволяет управлять контактной информацией. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject5;
import org.openapitools.client.model.InlineObject6;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Получить все категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesGetTest() throws ApiException {
        List<InlineResponse200> response = api.categoriesGet();

        // TODO: test validations
    }
    
    /**
     * Удалить категорию по ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesIdDeleteTest() throws ApiException {
        Integer id = null;
        api.categoriesIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Получить категорию по ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesIdGetTest() throws ApiException {
        Integer id = null;
        InlineResponse200 response = api.categoriesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Обновить информацию о категории
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesIdPutTest() throws ApiException {
        Integer id = null;
        InlineObject1 inlineObject1 = null;
        api.categoriesIdPut(id, inlineObject1);

        // TODO: test validations
    }
    
    /**
     * Добавить новую категорию
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void categoriesPostTest() throws ApiException {
        InlineObject inlineObject = null;
        api.categoriesPost(inlineObject);

        // TODO: test validations
    }
    
    /**
     * Получить все дома
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void housesGetTest() throws ApiException {
        List<InlineResponse2001> response = api.housesGet();

        // TODO: test validations
    }
    
    /**
     * Удалить дом по ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void housesIdDeleteTest() throws ApiException {
        Integer id = null;
        api.housesIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * Получить дом по ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void housesIdGetTest() throws ApiException {
        Integer id = null;
        InlineResponse2001 response = api.housesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Обновить информацию о доме
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void housesIdPutTest() throws ApiException {
        Integer id = null;
        InlineObject3 inlineObject3 = null;
        api.housesIdPut(id, inlineObject3);

        // TODO: test validations
    }
    
    /**
     * Добавить новый дом
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void housesPostTest() throws ApiException {
        InlineObject2 inlineObject2 = null;
        api.housesPost(inlineObject2);

        // TODO: test validations
    }
    
    /**
     * Получить все платежи
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentsGetTest() throws ApiException {
        List<InlineResponse2002> response = api.paymentsGet();

        // TODO: test validations
    }
    
    /**
     * Добавить новый платеж
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void paymentsPostTest() throws ApiException {
        InlineObject4 inlineObject4 = null;
        api.paymentsPost(inlineObject4);

        // TODO: test validations
    }
    
    /**
     * Получить всех арендаторов
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tenantsGetTest() throws ApiException {
        List<InlineResponse2003> response = api.tenantsGet();

        // TODO: test validations
    }
    
    /**
     * Добавить нового арендатора
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tenantsPostTest() throws ApiException {
        InlineObject5 inlineObject5 = null;
        api.tenantsPost(inlineObject5);

        // TODO: test validations
    }
    
    /**
     * Получить всех пользователей
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        List<InlineResponse2004> response = api.usersGet();

        // TODO: test validations
    }
    
    /**
     * Добавить нового пользователя
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        InlineObject6 inlineObject6 = null;
        api.usersPost(inlineObject6);

        // TODO: test validations
    }
    
}
