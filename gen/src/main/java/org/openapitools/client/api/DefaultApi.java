/*
 * Курсовая работа \"Разработка базы данных для веб-системы аренды домов\"
 * Автор работы: Кищенко Кирилл Александрович Это API предназначено для управления арендой домов.  Оно предоставляет функционал для работы с категориями домов,  арендаторами, платежами и настройками системы.  Каждый дом может быть отнесен к одной из категорий, и может  иметь множество арендаторов. Платежи связаны с арендаторами,  а система настроек позволяет управлять контактной информацией. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject5;
import org.openapitools.client.model.InlineObject6;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for categoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список категорий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = categoriesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить все категории
     * 
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список категорий </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse200> categoriesGet() throws ApiException {
        ApiResponse<List<InlineResponse200>> localVarResp = categoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить все категории
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список категорий </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse200>> categoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить все категории (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список категорий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetAsync(final ApiCallback<List<InlineResponse200>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdDelete
     * @param id Идентификатор категории (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить категорию по ID
     * 
     * @param id Идентификатор категории (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesIdDelete(Integer id) throws ApiException {
        categoriesIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить категорию по ID
     * 
     * @param id Идентификатор категории (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить категорию по ID (asynchronously)
     * 
     * @param id Идентификатор категории (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdGet
     * @param id Идентификатор категории (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о категории </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить категорию по ID
     * 
     * @param id Идентификатор категории (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о категории </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 categoriesIdGet(Integer id) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = categoriesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить категорию по ID
     * 
     * @param id Идентификатор категории (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о категории </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> categoriesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить категорию по ID (asynchronously)
     * 
     * @param id Идентификатор категории (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о категории </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdGetAsync(Integer id, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdPut
     * @param id Идентификатор категории (required)
     * @param inlineObject1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdPutCall(Integer id, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdPutValidateBeforeCall(Integer id, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdPut(Async)");
        }
        
        // verify the required parameter 'inlineObject1' is set
        if (inlineObject1 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject1' when calling categoriesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesIdPutCall(id, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию о категории
     * 
     * @param id Идентификатор категории (required)
     * @param inlineObject1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesIdPut(Integer id, InlineObject1 inlineObject1) throws ApiException {
        categoriesIdPutWithHttpInfo(id, inlineObject1);
    }

    /**
     * Обновить информацию о категории
     * 
     * @param id Идентификатор категории (required)
     * @param inlineObject1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesIdPutWithHttpInfo(Integer id, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdPutValidateBeforeCall(id, inlineObject1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Обновить информацию о категории (asynchronously)
     * 
     * @param id Идентификатор категории (required)
     * @param inlineObject1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Категория не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdPutAsync(Integer id, InlineObject1 inlineObject1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdPutValidateBeforeCall(id, inlineObject1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesPost
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesPostValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling categoriesPost(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesPostCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Добавить новую категорию
     * 
     * @param inlineObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория создана </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesPost(InlineObject inlineObject) throws ApiException {
        categoriesPostWithHttpInfo(inlineObject);
    }

    /**
     * Добавить новую категорию
     * 
     * @param inlineObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория создана </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesPostWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить новую категорию (asynchronously)
     * 
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostAsync(InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for housesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список домов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = housesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить все дома
     * 
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список домов </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse2001> housesGet() throws ApiException {
        ApiResponse<List<InlineResponse2001>> localVarResp = housesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить все дома
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список домов </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse2001>> housesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = housesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить все дома (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список домов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesGetAsync(final ApiCallback<List<InlineResponse2001>> _callback) throws ApiException {

        okhttp3.Call localVarCall = housesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for housesIdDelete
     * @param id Идентификатор дома (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housesIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling housesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = housesIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить дом по ID
     * 
     * @param id Идентификатор дома (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public void housesIdDelete(Integer id) throws ApiException {
        housesIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить дом по ID
     * 
     * @param id Идентификатор дома (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> housesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = housesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить дом по ID (asynchronously)
     * 
     * @param id Идентификатор дома (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = housesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for housesIdGet
     * @param id Идентификатор дома (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о доме </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/houses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling housesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = housesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить дом по ID
     * 
     * @param id Идентификатор дома (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о доме </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 housesIdGet(Integer id) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = housesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить дом по ID
     * 
     * @param id Идентификатор дома (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о доме </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> housesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = housesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить дом по ID (asynchronously)
     * 
     * @param id Идентификатор дома (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о доме </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesIdGetAsync(Integer id, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = housesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for housesIdPut
     * @param id Идентификатор дома (required)
     * @param inlineObject3  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом обновлен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesIdPutCall(Integer id, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/houses/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housesIdPutValidateBeforeCall(Integer id, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling housesIdPut(Async)");
        }
        
        // verify the required parameter 'inlineObject3' is set
        if (inlineObject3 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject3' when calling housesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = housesIdPutCall(id, inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию о доме
     * 
     * @param id Идентификатор дома (required)
     * @param inlineObject3  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом обновлен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public void housesIdPut(Integer id, InlineObject3 inlineObject3) throws ApiException {
        housesIdPutWithHttpInfo(id, inlineObject3);
    }

    /**
     * Обновить информацию о доме
     * 
     * @param id Идентификатор дома (required)
     * @param inlineObject3  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом обновлен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> housesIdPutWithHttpInfo(Integer id, InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = housesIdPutValidateBeforeCall(id, inlineObject3, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Обновить информацию о доме (asynchronously)
     * 
     * @param id Идентификатор дома (required)
     * @param inlineObject3  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Дом обновлен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Дом не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesIdPutAsync(Integer id, InlineObject3 inlineObject3, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = housesIdPutValidateBeforeCall(id, inlineObject3, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for housesPost
     * @param inlineObject2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Дом добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesPostCall(InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject2;

        // create path and map variables
        String localVarPath = "/houses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call housesPostValidateBeforeCall(InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject2' is set
        if (inlineObject2 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject2' when calling housesPost(Async)");
        }
        

        okhttp3.Call localVarCall = housesPostCall(inlineObject2, _callback);
        return localVarCall;

    }

    /**
     * Добавить новый дом
     * 
     * @param inlineObject2  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Дом добавлен </td><td>  -  </td></tr>
     </table>
     */
    public void housesPost(InlineObject2 inlineObject2) throws ApiException {
        housesPostWithHttpInfo(inlineObject2);
    }

    /**
     * Добавить новый дом
     * 
     * @param inlineObject2  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Дом добавлен </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> housesPostWithHttpInfo(InlineObject2 inlineObject2) throws ApiException {
        okhttp3.Call localVarCall = housesPostValidateBeforeCall(inlineObject2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить новый дом (asynchronously)
     * 
     * @param inlineObject2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Дом добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call housesPostAsync(InlineObject2 inlineObject2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = housesPostValidateBeforeCall(inlineObject2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список платежей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = paymentsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить все платежи
     * 
     * @return List&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список платежей </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse2002> paymentsGet() throws ApiException {
        ApiResponse<List<InlineResponse2002>> localVarResp = paymentsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить все платежи
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse2002&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список платежей </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse2002>> paymentsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = paymentsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить все платежи (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список платежей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsGetAsync(final ApiCallback<List<InlineResponse2002>> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsPost
     * @param inlineObject4  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Платеж добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsPostCall(InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject4;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsPostValidateBeforeCall(InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject4' is set
        if (inlineObject4 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject4' when calling paymentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentsPostCall(inlineObject4, _callback);
        return localVarCall;

    }

    /**
     * Добавить новый платеж
     * 
     * @param inlineObject4  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Платеж добавлен </td><td>  -  </td></tr>
     </table>
     */
    public void paymentsPost(InlineObject4 inlineObject4) throws ApiException {
        paymentsPostWithHttpInfo(inlineObject4);
    }

    /**
     * Добавить новый платеж
     * 
     * @param inlineObject4  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Платеж добавлен </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentsPostWithHttpInfo(InlineObject4 inlineObject4) throws ApiException {
        okhttp3.Call localVarCall = paymentsPostValidateBeforeCall(inlineObject4, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить новый платеж (asynchronously)
     * 
     * @param inlineObject4  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Платеж добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsPostAsync(InlineObject4 inlineObject4, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsPostValidateBeforeCall(inlineObject4, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список арендаторов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = tenantsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить всех арендаторов
     * 
     * @return List&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список арендаторов </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse2003> tenantsGet() throws ApiException {
        ApiResponse<List<InlineResponse2003>> localVarResp = tenantsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить всех арендаторов
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse2003&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список арендаторов </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse2003>> tenantsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenantsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить всех арендаторов (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список арендаторов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantsGetAsync(final ApiCallback<List<InlineResponse2003>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse2003>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantsPost
     * @param inlineObject5  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Арендатор добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantsPostCall(InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject5;

        // create path and map variables
        String localVarPath = "/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantsPostValidateBeforeCall(InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject5' is set
        if (inlineObject5 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject5' when calling tenantsPost(Async)");
        }
        

        okhttp3.Call localVarCall = tenantsPostCall(inlineObject5, _callback);
        return localVarCall;

    }

    /**
     * Добавить нового арендатора
     * 
     * @param inlineObject5  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Арендатор добавлен </td><td>  -  </td></tr>
     </table>
     */
    public void tenantsPost(InlineObject5 inlineObject5) throws ApiException {
        tenantsPostWithHttpInfo(inlineObject5);
    }

    /**
     * Добавить нового арендатора
     * 
     * @param inlineObject5  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Арендатор добавлен </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tenantsPostWithHttpInfo(InlineObject5 inlineObject5) throws ApiException {
        okhttp3.Call localVarCall = tenantsPostValidateBeforeCall(inlineObject5, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить нового арендатора (asynchronously)
     * 
     * @param inlineObject5  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Арендатор добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantsPostAsync(InlineObject5 inlineObject5, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantsPostValidateBeforeCall(inlineObject5, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список пользователей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить всех пользователей
     * 
     * @return List&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список пользователей </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse2004> usersGet() throws ApiException {
        ApiResponse<List<InlineResponse2004>> localVarResp = usersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить всех пользователей
     * 
     * @return ApiResponse&lt;List&lt;InlineResponse2004&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список пользователей </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse2004>> usersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2004>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить всех пользователей (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список пользователей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(final ApiCallback<List<InlineResponse2004>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse2004>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPost
     * @param inlineObject6  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пользователь добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostCall(InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject6;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostValidateBeforeCall(InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject6' is set
        if (inlineObject6 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject6' when calling usersPost(Async)");
        }
        

        okhttp3.Call localVarCall = usersPostCall(inlineObject6, _callback);
        return localVarCall;

    }

    /**
     * Добавить нового пользователя
     * 
     * @param inlineObject6  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пользователь добавлен </td><td>  -  </td></tr>
     </table>
     */
    public void usersPost(InlineObject6 inlineObject6) throws ApiException {
        usersPostWithHttpInfo(inlineObject6);
    }

    /**
     * Добавить нового пользователя
     * 
     * @param inlineObject6  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пользователь добавлен </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersPostWithHttpInfo(InlineObject6 inlineObject6) throws ApiException {
        okhttp3.Call localVarCall = usersPostValidateBeforeCall(inlineObject6, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить нового пользователя (asynchronously)
     * 
     * @param inlineObject6  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пользователь добавлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostAsync(InlineObject6 inlineObject6, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostValidateBeforeCall(inlineObject6, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
