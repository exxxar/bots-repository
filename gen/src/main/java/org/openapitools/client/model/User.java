/*
 * Курсовая работа \"Разработка базы данных для веб-системы аренды домов\"
 * Автор работы: Кищенко Кирилл Александрович Это API предназначено для управления арендой домов.  Оно предоставляет функционал для работы с категориями домов,  арендаторами, платежами и настройками системы.  Каждый дом может быть отнесен к одной из категорий, и может  иметь множество арендаторов. Платежи связаны с арендаторами,  а система настроек позволяет управлять контактной информацией. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-19T10:18:59.509201700+03:00[Africa/Nairobi]")
public class User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;


  public User id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Идентификатор пользователя
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Идентификатор пользователя")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public User name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Имя пользователя
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Имя пользователя")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public User username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Логин пользователя
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Логин пользователя")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public User password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Пароль пользователя
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Пароль пользователя")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public User type(Integer type) {
    
    this.type = type;
    return this;
  }

   /**
   * Тип пользователя (1 — Администратор, 2 — Сотрудник)
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Тип пользователя (1 — Администратор, 2 — Сотрудник)")

  public Integer getType() {
    return type;
  }


  public void setType(Integer type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.type, user.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, username, password, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

