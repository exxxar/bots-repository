/*
 * Курсовая работа \"Разработка базы данных для веб-системы аренды домов\"
 * Автор работы: Кищенко Кирилл Александрович Это API предназначено для управления арендой домов.  Оно предоставляет функционал для работы с категориями домов,  арендаторами, платежами и настройками системы.  Каждый дом может быть отнесен к одной из категорий, и может  иметь множество арендаторов. Платежи связаны с арендаторами,  а система настроек позволяет управлять контактной информацией. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineObject3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-19T10:18:59.509201700+03:00[Africa/Nairobi]")
public class InlineObject3 {
  public static final String SERIALIZED_NAME_HOUSE_NO = "house_no";
  @SerializedName(SERIALIZED_NAME_HOUSE_NO)
  private String houseNo;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Float price;


  public InlineObject3 houseNo(String houseNo) {
    
    this.houseNo = houseNo;
    return this;
  }

   /**
   * Get houseNo
   * @return houseNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHouseNo() {
    return houseNo;
  }


  public void setHouseNo(String houseNo) {
    this.houseNo = houseNo;
  }


  public InlineObject3 categoryId(Integer categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public InlineObject3 description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public InlineObject3 price(Float price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getPrice() {
    return price;
  }


  public void setPrice(Float price) {
    this.price = price;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject3 inlineObject3 = (InlineObject3) o;
    return Objects.equals(this.houseNo, inlineObject3.houseNo) &&
        Objects.equals(this.categoryId, inlineObject3.categoryId) &&
        Objects.equals(this.description, inlineObject3.description) &&
        Objects.equals(this.price, inlineObject3.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(houseNo, categoryId, description, price);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject3 {\n");
    sb.append("    houseNo: ").append(toIndentedString(houseNo)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

